{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst Binary = require('../driver').get().Binary;\n\nconst utils = require('../utils');\n\nconst Buffer = require('safe-buffer').Buffer; // Yes this is weird. See https://github.com/feross/safe-buffer/pull/23\n\n\nconst proto = Buffer.from('').constructor.prototype;\n/**\n * Mongoose Buffer constructor.\n *\n * Values always have to be passed to the constructor to initialize.\n *\n * @param {Buffer} value\n * @param {String} encode\n * @param {Number} offset\n * @api private\n * @inherits Buffer\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseBuffer(value, encode, offset) {\n  const length = arguments.length;\n  let val;\n\n  if (length === 0 || arguments[0] === null || arguments[0] === undefined) {\n    val = 0;\n  } else {\n    val = value;\n  }\n\n  let encoding;\n  let path;\n  let doc;\n\n  if (Array.isArray(encode)) {\n    // internal casting\n    path = encode[0];\n    doc = encode[1];\n  } else {\n    encoding = encode;\n  }\n\n  let buf;\n\n  if (typeof val === 'number' || val instanceof Number) {\n    buf = Buffer.alloc(val);\n  } else {\n    // string, array or object { type: 'Buffer', data: [...] }\n    buf = Buffer.from(val, encoding, offset);\n  }\n\n  utils.decorate(buf, MongooseBuffer.mixin);\n  buf.isMongooseBuffer = true; // make sure these internal props don't show up in Object.keys()\n\n  buf[MongooseBuffer.pathSymbol] = path;\n  buf[parentSymbol] = doc;\n  buf._subtype = 0;\n  return buf;\n}\n\nconst pathSymbol = Symbol.for('mongoose#Buffer#_path');\nconst parentSymbol = Symbol.for('mongoose#Buffer#_parent');\nMongooseBuffer.pathSymbol = pathSymbol;\n/*!\n * Inherit from Buffer.\n */\n\nMongooseBuffer.mixin = {\n  /**\n   * Default subtype for the Binary representing this Buffer\n   *\n   * @api private\n   * @property _subtype\n   * @receiver MongooseBuffer\n   */\n  _subtype: undefined,\n\n  /**\n   * Marks this buffer as modified.\n   *\n   * @api private\n   * @method _markModified\n   * @receiver MongooseBuffer\n   */\n  _markModified: function () {\n    const parent = this[parentSymbol];\n\n    if (parent) {\n      parent.markModified(this[MongooseBuffer.pathSymbol]);\n    }\n\n    return this;\n  },\n\n  /**\n   * Writes the buffer.\n   *\n   * @api public\n   * @method write\n   * @receiver MongooseBuffer\n   */\n  write: function () {\n    const written = proto.write.apply(this, arguments);\n\n    if (written > 0) {\n      this._markModified();\n    }\n\n    return written;\n  },\n\n  /**\n   * Copies the buffer.\n   *\n   * ####Note:\n   *\n   * `Buffer#copy` does not mark `target` as modified so you must copy from a `MongooseBuffer` for it to work as expected. This is a work around since `copy` modifies the target, not this.\n   *\n   * @return {Number} The number of bytes copied.\n   * @param {Buffer} target\n   * @method copy\n   * @receiver MongooseBuffer\n   */\n  copy: function (target) {\n    const ret = proto.copy.apply(this, arguments);\n\n    if (target && target.isMongooseBuffer) {\n      target._markModified();\n    }\n\n    return ret;\n  }\n};\n/*!\n * Compile other Buffer methods marking this buffer as modified.\n */\n\n( // node < 0.5\n'writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 ' + 'writeFloat writeDouble fill ' + 'utf8Write binaryWrite asciiWrite set ' + // node >= 0.5\n'writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE ' + 'writeInt16LE writeInt16BE writeInt32LE writeInt32BE ' + 'writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE').split(' ').forEach(function (method) {\n  if (!proto[method]) {\n    return;\n  }\n\n  MongooseBuffer.mixin[method] = function () {\n    const ret = proto[method].apply(this, arguments);\n\n    this._markModified();\n\n    return ret;\n  };\n});\n/**\n * Converts this buffer to its Binary type representation.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} [subtype]\n * @return {Binary}\n * @api public\n * @method toObject\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toObject = function (options) {\n  const subtype = typeof options === 'number' ? options : this._subtype || 0;\n  return new Binary(Buffer.from(this), subtype);\n};\n/**\n * Converts this buffer for storage in MongoDB, including subtype\n *\n * @return {Binary}\n * @api public\n * @method toBSON\n * @receiver MongooseBuffer\n */\n\n\nMongooseBuffer.mixin.toBSON = function () {\n  return new Binary(this, this._subtype || 0);\n};\n/**\n * Determines if this buffer is equals to `other` buffer\n *\n * @param {Buffer} other\n * @return {Boolean}\n * @method equals\n * @receiver MongooseBuffer\n */\n\n\nMongooseBuffer.mixin.equals = function (other) {\n  if (!Buffer.isBuffer(other)) {\n    return false;\n  }\n\n  if (this.length !== other.length) {\n    return false;\n  }\n\n  for (let i = 0; i < this.length; ++i) {\n    if (this[i] !== other[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Sets the subtype option and marks the buffer modified.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} subtype\n * @api public\n * @method subtype\n * @receiver MongooseBuffer\n */\n\n\nMongooseBuffer.mixin.subtype = function (subtype) {\n  if (typeof subtype !== 'number') {\n    throw new TypeError('Invalid subtype. Expected a number');\n  }\n\n  if (this._subtype !== subtype) {\n    this._markModified();\n  }\n\n  this._subtype = subtype;\n};\n/*!\n * Module exports.\n */\n\n\nMongooseBuffer.Binary = Binary;\nmodule.exports = MongooseBuffer;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/types/buffer.js"],"names":["Binary","require","get","utils","Buffer","proto","from","constructor","prototype","MongooseBuffer","value","encode","offset","length","arguments","val","undefined","encoding","path","doc","Array","isArray","buf","Number","alloc","decorate","mixin","isMongooseBuffer","pathSymbol","parentSymbol","_subtype","Symbol","for","_markModified","parent","markModified","write","written","apply","copy","target","ret","split","forEach","method","toObject","options","subtype","toBSON","equals","other","isBuffer","i","TypeError","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst Binary = require('../driver').get().Binary;\nconst utils = require('../utils');\nconst Buffer = require('safe-buffer').Buffer;\n\n// Yes this is weird. See https://github.com/feross/safe-buffer/pull/23\nconst proto = Buffer.from('').constructor.prototype;\n\n/**\n * Mongoose Buffer constructor.\n *\n * Values always have to be passed to the constructor to initialize.\n *\n * @param {Buffer} value\n * @param {String} encode\n * @param {Number} offset\n * @api private\n * @inherits Buffer\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseBuffer(value, encode, offset) {\n  const length = arguments.length;\n  let val;\n\n  if (length === 0 || arguments[0] === null || arguments[0] === undefined) {\n    val = 0;\n  } else {\n    val = value;\n  }\n\n  let encoding;\n  let path;\n  let doc;\n\n  if (Array.isArray(encode)) {\n    // internal casting\n    path = encode[0];\n    doc = encode[1];\n  } else {\n    encoding = encode;\n  }\n\n  let buf;\n  if (typeof val === 'number' || val instanceof Number) {\n    buf = Buffer.alloc(val);\n  } else { // string, array or object { type: 'Buffer', data: [...] }\n    buf = Buffer.from(val, encoding, offset);\n  }\n  utils.decorate(buf, MongooseBuffer.mixin);\n  buf.isMongooseBuffer = true;\n\n  // make sure these internal props don't show up in Object.keys()\n  buf[MongooseBuffer.pathSymbol] = path;\n  buf[parentSymbol] = doc;\n\n  buf._subtype = 0;\n  return buf;\n}\n\nconst pathSymbol = Symbol.for('mongoose#Buffer#_path');\nconst parentSymbol = Symbol.for('mongoose#Buffer#_parent');\nMongooseBuffer.pathSymbol = pathSymbol;\n\n/*!\n * Inherit from Buffer.\n */\n\nMongooseBuffer.mixin = {\n\n  /**\n   * Default subtype for the Binary representing this Buffer\n   *\n   * @api private\n   * @property _subtype\n   * @receiver MongooseBuffer\n   */\n\n  _subtype: undefined,\n\n  /**\n   * Marks this buffer as modified.\n   *\n   * @api private\n   * @method _markModified\n   * @receiver MongooseBuffer\n   */\n\n  _markModified: function() {\n    const parent = this[parentSymbol];\n\n    if (parent) {\n      parent.markModified(this[MongooseBuffer.pathSymbol]);\n    }\n    return this;\n  },\n\n  /**\n   * Writes the buffer.\n   *\n   * @api public\n   * @method write\n   * @receiver MongooseBuffer\n   */\n\n  write: function() {\n    const written = proto.write.apply(this, arguments);\n\n    if (written > 0) {\n      this._markModified();\n    }\n\n    return written;\n  },\n\n  /**\n   * Copies the buffer.\n   *\n   * ####Note:\n   *\n   * `Buffer#copy` does not mark `target` as modified so you must copy from a `MongooseBuffer` for it to work as expected. This is a work around since `copy` modifies the target, not this.\n   *\n   * @return {Number} The number of bytes copied.\n   * @param {Buffer} target\n   * @method copy\n   * @receiver MongooseBuffer\n   */\n\n  copy: function(target) {\n    const ret = proto.copy.apply(this, arguments);\n\n    if (target && target.isMongooseBuffer) {\n      target._markModified();\n    }\n\n    return ret;\n  }\n};\n\n/*!\n * Compile other Buffer methods marking this buffer as modified.\n */\n\n(\n// node < 0.5\n  ('writeUInt8 writeUInt16 writeUInt32 writeInt8 writeInt16 writeInt32 ' +\n    'writeFloat writeDouble fill ' +\n    'utf8Write binaryWrite asciiWrite set ' +\n\n  // node >= 0.5\n    'writeUInt16LE writeUInt16BE writeUInt32LE writeUInt32BE ' +\n    'writeInt16LE writeInt16BE writeInt32LE writeInt32BE ' + 'writeFloatLE writeFloatBE writeDoubleLE writeDoubleBE')\n).split(' ').forEach(function(method) {\n  if (!proto[method]) {\n    return;\n  }\n  MongooseBuffer.mixin[method] = function() {\n    const ret = proto[method].apply(this, arguments);\n    this._markModified();\n    return ret;\n  };\n});\n\n/**\n * Converts this buffer to its Binary type representation.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} [subtype]\n * @return {Binary}\n * @api public\n * @method toObject\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toObject = function(options) {\n  const subtype = typeof options === 'number'\n    ? options\n    : (this._subtype || 0);\n  return new Binary(Buffer.from(this), subtype);\n};\n\n/**\n * Converts this buffer for storage in MongoDB, including subtype\n *\n * @return {Binary}\n * @api public\n * @method toBSON\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.toBSON = function() {\n  return new Binary(this, this._subtype || 0);\n};\n\n/**\n * Determines if this buffer is equals to `other` buffer\n *\n * @param {Buffer} other\n * @return {Boolean}\n * @method equals\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.equals = function(other) {\n  if (!Buffer.isBuffer(other)) {\n    return false;\n  }\n\n  if (this.length !== other.length) {\n    return false;\n  }\n\n  for (let i = 0; i < this.length; ++i) {\n    if (this[i] !== other[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sets the subtype option and marks the buffer modified.\n *\n * ####SubTypes:\n *\n *   var bson = require('bson')\n *   bson.BSON_BINARY_SUBTYPE_DEFAULT\n *   bson.BSON_BINARY_SUBTYPE_FUNCTION\n *   bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY\n *   bson.BSON_BINARY_SUBTYPE_UUID\n *   bson.BSON_BINARY_SUBTYPE_MD5\n *   bson.BSON_BINARY_SUBTYPE_USER_DEFINED\n *\n *   doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);\n *\n * @see http://bsonspec.org/#/specification\n * @param {Hex} subtype\n * @api public\n * @method subtype\n * @receiver MongooseBuffer\n */\n\nMongooseBuffer.mixin.subtype = function(subtype) {\n  if (typeof subtype !== 'number') {\n    throw new TypeError('Invalid subtype. Expected a number');\n  }\n\n  if (this._subtype !== subtype) {\n    this._markModified();\n  }\n\n  this._subtype = subtype;\n};\n\n/*!\n * Module exports.\n */\n\nMongooseBuffer.Binary = Binary;\n\nmodule.exports = MongooseBuffer;\n"]},"metadata":{},"sourceType":"script"}