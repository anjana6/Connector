{"ast":null,"code":"'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\n\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  let key;\n  let createdAt;\n  let updatedAt;\n  let timestamps;\n  let path;\n  const hasDollarKey = keys.length && keys[0].startsWith('$');\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      for (key in update.$push) {\n        const $path = schema.path(key);\n\n        if (update.$push[key] && $path && $path.$isMongooseDocumentArray && $path.schema.options.timestamps) {\n          timestamps = $path.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (update.$push[key].$each) {\n            update.$push[key].$each.forEach(function (subdoc) {\n              if (updatedAt != null) {\n                subdoc[updatedAt] = now;\n              }\n\n              if (createdAt != null) {\n                subdoc[createdAt] = now;\n              }\n            });\n          } else {\n            if (updatedAt != null) {\n              update.$push[key][updatedAt] = now;\n            }\n\n            if (createdAt != null) {\n              update.$push[key][createdAt] = now;\n            }\n          }\n        }\n      }\n    }\n\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n\n      for (key of keys) {\n        // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n        const keyToSearch = cleanPositionalOperators(key);\n        path = schema.path(keyToSearch);\n\n        if (!path) {\n          continue;\n        }\n\n        let parentSchemaType = null;\n        const pieces = keyToSearch.split('.');\n\n        for (let i = pieces.length - 1; i > 0; --i) {\n          const s = schema.path(pieces.slice(0, i).join('.'));\n\n          if (s != null && (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n            parentSchemaType = s;\n            break;\n          }\n        }\n\n        if (Array.isArray(update.$set[key]) && path.$isMongooseDocumentArray) {\n          applyTimestampsToDocumentArray(update.$set[key], path, now);\n        } else if (update.$set[key] && path.$isSingleNested) {\n          applyTimestampsToSingleNested(update.$set[key], path, now);\n        } else if (parentSchemaType != null) {\n          timestamps = parentSchemaType.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (!timestamps || updatedAt == null) {\n            continue;\n          }\n\n          if (parentSchemaType.$isSingleNested) {\n            // Single nested is easy\n            update.$set[parentSchemaType.path + '.' + updatedAt] = now;\n            continue;\n          }\n\n          let childPath = key.substr(parentSchemaType.path.length + 1);\n\n          if (/^\\d+$/.test(childPath)) {\n            update.$set[parentSchemaType.path + '.' + childPath][updatedAt] = now;\n            continue;\n          }\n\n          const firstDot = childPath.indexOf('.');\n          childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n          update.$set[parentSchemaType.path + '.' + childPath + '.' + updatedAt] = now;\n        } else if (path.schema != null && path.schema != schema && update.$set[key]) {\n          timestamps = path.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (!timestamps) {\n            continue;\n          }\n\n          if (updatedAt != null) {\n            update.$set[key][updatedAt] = now;\n          }\n\n          if (createdAt != null) {\n            update.$set[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  } else {\n    const keys = Object.keys(update).filter(key => !key.startsWith('$'));\n\n    for (key of keys) {\n      // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n      const keyToSearch = cleanPositionalOperators(key);\n      path = schema.path(keyToSearch);\n\n      if (!path) {\n        continue;\n      }\n\n      if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n        applyTimestampsToDocumentArray(update[key], path, now);\n      } else if (update[key] != null && path.$isSingleNested) {\n        applyTimestampsToSingleNested(update[key], path, now);\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n}","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js"],"names":["cleanPositionalOperators","require","handleTimestampOption","module","exports","applyTimestampsToChildren","now","update","schema","keys","Object","key","createdAt","updatedAt","timestamps","path","hasDollarKey","length","startsWith","$push","$path","$isMongooseDocumentArray","options","$each","forEach","subdoc","$set","keyToSearch","parentSchemaType","pieces","split","i","s","slice","join","$isSingleNested","Array","isArray","applyTimestampsToDocumentArray","applyTimestampsToSingleNested","childPath","substr","test","firstDot","indexOf","filter","arr","schematype","len"],"mappings":"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","sourcesContent":["'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  const keys = Object.keys(update);\n  let key;\n  let createdAt;\n  let updatedAt;\n  let timestamps;\n  let path;\n\n  const hasDollarKey = keys.length && keys[0].startsWith('$');\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      for (key in update.$push) {\n        const $path = schema.path(key);\n        if (update.$push[key] &&\n            $path &&\n            $path.$isMongooseDocumentArray &&\n            $path.schema.options.timestamps) {\n          timestamps = $path.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n          if (update.$push[key].$each) {\n            update.$push[key].$each.forEach(function(subdoc) {\n              if (updatedAt != null) {\n                subdoc[updatedAt] = now;\n              }\n              if (createdAt != null) {\n                subdoc[createdAt] = now;\n              }\n            });\n          } else {\n            if (updatedAt != null) {\n              update.$push[key][updatedAt] = now;\n            }\n            if (createdAt != null) {\n              update.$push[key][createdAt] = now;\n            }\n          }\n        }\n      }\n    }\n    if (update.$set != null) {\n      const keys = Object.keys(update.$set);\n      for (key of keys) {\n        // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n        const keyToSearch = cleanPositionalOperators(key);\n        path = schema.path(keyToSearch);\n        if (!path) {\n          continue;\n        }\n\n        let parentSchemaType = null;\n        const pieces = keyToSearch.split('.');\n        for (let i = pieces.length - 1; i > 0; --i) {\n          const s = schema.path(pieces.slice(0, i).join('.'));\n          if (s != null &&\n              (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n            parentSchemaType = s;\n            break;\n          }\n        }\n\n        if (Array.isArray(update.$set[key]) && path.$isMongooseDocumentArray) {\n          applyTimestampsToDocumentArray(update.$set[key], path, now);\n        } else if (update.$set[key] && path.$isSingleNested) {\n          applyTimestampsToSingleNested(update.$set[key], path, now);\n        } else if (parentSchemaType != null) {\n          timestamps = parentSchemaType.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (!timestamps || updatedAt == null) {\n            continue;\n          }\n\n          if (parentSchemaType.$isSingleNested) {\n            // Single nested is easy\n            update.$set[parentSchemaType.path + '.' + updatedAt] = now;\n            continue;\n          }\n\n          let childPath = key.substr(parentSchemaType.path.length + 1);\n\n          if (/^\\d+$/.test(childPath)) {\n            update.$set[parentSchemaType.path + '.' + childPath][updatedAt] = now;\n            continue;\n          }\n\n          const firstDot = childPath.indexOf('.');\n          childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n\n          update.$set[parentSchemaType.path + '.' + childPath + '.' + updatedAt] = now;\n        } else if (path.schema != null && path.schema != schema && update.$set[key]) {\n          timestamps = path.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (!timestamps) {\n            continue;\n          }\n\n          if (updatedAt != null) {\n            update.$set[key][updatedAt] = now;\n          }\n          if (createdAt != null) {\n            update.$set[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  } else {\n    const keys = Object.keys(update).filter(key => !key.startsWith('$'));\n    for (key of keys) {\n      // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n      const keyToSearch = cleanPositionalOperators(key);\n      path = schema.path(keyToSearch);\n      if (!path) {\n        continue;\n      }\n\n      if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n        applyTimestampsToDocumentArray(update[key], path, now);\n      } else if (update[key] != null && path.$isSingleNested) {\n        applyTimestampsToSingleNested(update[key], path, now);\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  const len = arr.length;\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  for (let i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  const timestamps = schematype.schema.options.timestamps;\n  if (!timestamps) {\n    return;\n  }\n\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n}"]},"metadata":{},"sourceType":"script"}