{"ast":null,"code":"'use strict';\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     const fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @param {Object} options\n * @param {string|function} [options.ref] if `ref` is not nullish, this becomes a [populated virtual](/docs/populate.html#populate-virtuals)\n * @param {string|function} [options.localField] the local field to populate on if this is a populated virtual.\n * @param {string|function} [options.foreignField] the foreign field to populate on if this is a populated virtual.\n * @param {boolean} [options.justOne=false] by default, a populated virtual is an array. If you set `justOne`, the populated virtual will be a single doc or `null`.\n * @param {boolean} [options.getters=false] if you set this to `true`, Mongoose will call any custom getters you defined on this virtual\n * @param {boolean} [options.count=false] if you set this to `true`, `populate()` will set this virtual to the number of populated documents, as opposed to the documents themselves, using [`Query#countDocuments()`](./api.html#query_Query-countDocuments)\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = Object.assign({}, options);\n}\n/**\n * If no getters/getters, add a default\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api private\n */\n\n\nVirtualType.prototype._applyDefaultGetters = function () {\n  if (this.getters.length > 0 || this.setters.length > 0) {\n    return;\n  }\n\n  const path = this.path;\n  const internalProperty = '$' + path;\n  this.getters.push(function () {\n    return this[internalProperty];\n  });\n  this.setters.push(function (v) {\n    this[internalProperty] = v;\n  });\n};\n/*!\n * ignore\n */\n\n\nVirtualType.prototype.clone = function () {\n  const clone = new VirtualType(this.name, this.options);\n  clone.getters = [].concat(this.getters);\n  clone.setters = [].concat(this.setters);\n  return clone;\n};\n/**\n * Adds a custom getter to this virtual.\n *\n * Mongoose calls the getter function with 3 parameters:\n *\n * - `value`: the value returned by the previous getter. If there is only one getter, `value` will be `undefined`.\n * - `virtual`: the virtual object you called `.get()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.get(function(value, virtual, doc) {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\n\nVirtualType.prototype.get = function (fn) {\n  this.getters.push(fn);\n  return this;\n};\n/**\n * Adds a custom setter to this virtual.\n *\n * Mongoose calls the setter function with 3 parameters:\n *\n * - `value`: the value being set\n * - `virtual`: the virtual object you're calling `.set()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * ####Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.set(function(value, virtual, doc) {\n *       var parts = value.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model();\n *     // Calls the setter with `value = 'Jean-Luc Picard'`\n *     doc.fullname = 'Jean-Luc Picard';\n *     doc.name.first; // 'Jean-Luc'\n *     doc.name.last; // 'Picard'\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\n\nVirtualType.prototype.set = function (fn) {\n  this.setters.push(fn);\n  return this;\n};\n/**\n * Applies getters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc The document this virtual is attached to\n * @return {any} the value after applying all getters\n * @api public\n */\n\n\nVirtualType.prototype.applyGetters = function (value, doc) {\n  let v = value;\n\n  for (let l = this.getters.length - 1; l >= 0; l--) {\n    v = this.getters[l].call(doc, v, this, doc);\n  }\n\n  return v;\n};\n/**\n * Applies setters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc\n * @return {any} the value after applying all setters\n * @api public\n */\n\n\nVirtualType.prototype.applySetters = function (value, doc) {\n  let v = value;\n\n  for (let l = this.setters.length - 1; l >= 0; l--) {\n    v = this.setters[l].call(doc, v, this, doc);\n  }\n\n  return v;\n};\n/*!\n * exports\n */\n\n\nmodule.exports = VirtualType;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/virtualtype.js"],"names":["VirtualType","options","name","path","getters","setters","Object","assign","prototype","_applyDefaultGetters","length","internalProperty","push","v","clone","concat","get","fn","set","applyGetters","value","doc","l","call","applySetters","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AAClC,OAAKC,IAAL,GAAYD,IAAZ;AACA,OAAKE,OAAL,GAAe,EAAf;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKJ,OAAL,GAAeK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,OAAlB,CAAf;AACD;AAED;;;;;;;;;AAQAD,WAAW,CAACQ,SAAZ,CAAsBC,oBAAtB,GAA6C,YAAW;AACtD,MAAI,KAAKL,OAAL,CAAaM,MAAb,GAAsB,CAAtB,IAA2B,KAAKL,OAAL,CAAaK,MAAb,GAAsB,CAArD,EAAwD;AACtD;AACD;;AAED,QAAMP,IAAI,GAAG,KAAKA,IAAlB;AACA,QAAMQ,gBAAgB,GAAG,MAAMR,IAA/B;AACA,OAAKC,OAAL,CAAaQ,IAAb,CAAkB,YAAW;AAC3B,WAAO,KAAKD,gBAAL,CAAP;AACD,GAFD;AAGA,OAAKN,OAAL,CAAaO,IAAb,CAAkB,UAASC,CAAT,EAAY;AAC5B,SAAKF,gBAAL,IAAyBE,CAAzB;AACD,GAFD;AAGD,CAbD;AAeA;;;;;AAIAb,WAAW,CAACQ,SAAZ,CAAsBM,KAAtB,GAA8B,YAAW;AACvC,QAAMA,KAAK,GAAG,IAAId,WAAJ,CAAgB,KAAKE,IAArB,EAA2B,KAAKD,OAAhC,CAAd;AACAa,EAAAA,KAAK,CAACV,OAAN,GAAgB,GAAGW,MAAH,CAAU,KAAKX,OAAf,CAAhB;AACAU,EAAAA,KAAK,CAACT,OAAN,GAAgB,GAAGU,MAAH,CAAU,KAAKV,OAAf,CAAhB;AACA,SAAOS,KAAP;AACD,CALD;AAOA;;;;;;;;;;;;;;;;;;;;;;AAqBAd,WAAW,CAACQ,SAAZ,CAAsBQ,GAAtB,GAA4B,UAASC,EAAT,EAAa;AACvC,OAAKb,OAAL,CAAaQ,IAAb,CAAkBK,EAAlB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAjB,WAAW,CAACQ,SAAZ,CAAsBU,GAAtB,GAA4B,UAASD,EAAT,EAAa;AACvC,OAAKZ,OAAL,CAAaO,IAAb,CAAkBK,EAAlB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;;;;;;;;;;AASAjB,WAAW,CAACQ,SAAZ,CAAsBW,YAAtB,GAAqC,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AACxD,MAAIR,CAAC,GAAGO,KAAR;;AACA,OAAK,IAAIE,CAAC,GAAG,KAAKlB,OAAL,CAAaM,MAAb,GAAsB,CAAnC,EAAsCY,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjDT,IAAAA,CAAC,GAAG,KAAKT,OAAL,CAAakB,CAAb,EAAgBC,IAAhB,CAAqBF,GAArB,EAA0BR,CAA1B,EAA6B,IAA7B,EAAmCQ,GAAnC,CAAJ;AACD;;AACD,SAAOR,CAAP;AACD,CAND;AAQA;;;;;;;;;;AASAb,WAAW,CAACQ,SAAZ,CAAsBgB,YAAtB,GAAqC,UAASJ,KAAT,EAAgBC,GAAhB,EAAqB;AACxD,MAAIR,CAAC,GAAGO,KAAR;;AACA,OAAK,IAAIE,CAAC,GAAG,KAAKjB,OAAL,CAAaK,MAAb,GAAsB,CAAnC,EAAsCY,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjDT,IAAAA,CAAC,GAAG,KAAKR,OAAL,CAAaiB,CAAb,EAAgBC,IAAhB,CAAqBF,GAArB,EAA0BR,CAA1B,EAA6B,IAA7B,EAAmCQ,GAAnC,CAAJ;AACD;;AACD,SAAOR,CAAP;AACD,CAND;AAQA;;;;;AAIAY,MAAM,CAACC,OAAP,GAAiB1B,WAAjB","sourcesContent":["'use strict';\n\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     const fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @param {Object} options\n * @param {string|function} [options.ref] if `ref` is not nullish, this becomes a [populated virtual](/docs/populate.html#populate-virtuals)\n * @param {string|function} [options.localField] the local field to populate on if this is a populated virtual.\n * @param {string|function} [options.foreignField] the foreign field to populate on if this is a populated virtual.\n * @param {boolean} [options.justOne=false] by default, a populated virtual is an array. If you set `justOne`, the populated virtual will be a single doc or `null`.\n * @param {boolean} [options.getters=false] if you set this to `true`, Mongoose will call any custom getters you defined on this virtual\n * @param {boolean} [options.count=false] if you set this to `true`, `populate()` will set this virtual to the number of populated documents, as opposed to the documents themselves, using [`Query#countDocuments()`](./api.html#query_Query-countDocuments)\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = Object.assign({}, options);\n}\n\n/**\n * If no getters/getters, add a default\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api private\n */\n\nVirtualType.prototype._applyDefaultGetters = function() {\n  if (this.getters.length > 0 || this.setters.length > 0) {\n    return;\n  }\n\n  const path = this.path;\n  const internalProperty = '$' + path;\n  this.getters.push(function() {\n    return this[internalProperty];\n  });\n  this.setters.push(function(v) {\n    this[internalProperty] = v;\n  });\n};\n\n/*!\n * ignore\n */\n\nVirtualType.prototype.clone = function() {\n  const clone = new VirtualType(this.name, this.options);\n  clone.getters = [].concat(this.getters);\n  clone.setters = [].concat(this.setters);\n  return clone;\n};\n\n/**\n * Adds a custom getter to this virtual.\n *\n * Mongoose calls the getter function with 3 parameters:\n *\n * - `value`: the value returned by the previous getter. If there is only one getter, `value` will be `undefined`.\n * - `virtual`: the virtual object you called `.get()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.get(function(value, virtual, doc) {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Adds a custom setter to this virtual.\n *\n * Mongoose calls the setter function with 3 parameters:\n *\n * - `value`: the value being set\n * - `virtual`: the virtual object you're calling `.set()` on\n * - `doc`: the document this virtual is attached to. Equivalent to `this`.\n *\n * ####Example:\n *\n *     const virtual = schema.virtual('fullname');\n *     virtual.set(function(value, virtual, doc) {\n *       var parts = value.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model();\n *     // Calls the setter with `value = 'Jean-Luc Picard'`\n *     doc.fullname = 'Jean-Luc Picard';\n *     doc.name.first; // 'Jean-Luc'\n *     doc.name.last; // 'Picard'\n *\n * @param {Function(Any, VirtualType, Document)} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc The document this virtual is attached to\n * @return {any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, doc) {\n  let v = value;\n  for (let l = this.getters.length - 1; l >= 0; l--) {\n    v = this.getters[l].call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value`.\n *\n * @param {Object} value\n * @param {Document} doc\n * @return {any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, doc) {\n  let v = value;\n  for (let l = this.setters.length - 1; l >= 0; l--) {\n    v = this.setters[l].call(doc, v, this, doc);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n"]},"metadata":{},"sourceType":"script"}