{"ast":null,"code":"'use strict';\n\nconst Mixed = require('../schema/mixed');\n\nconst get = require('../helpers/get');\n\nconst util = require('util');\n\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n/*!\n * ignore\n */\n\n\nclass MongooseMap extends Map {\n  constructor(v, path, doc, schemaType) {\n    if (v != null && v.constructor.name === 'Object') {\n      v = Object.keys(v).reduce((arr, key) => arr.concat([[key, v[key]]]), []);\n    }\n\n    super(v);\n    this.$__parent = doc != null && doc.$__ != null ? doc : null;\n    this.$__path = path;\n    this.$__schemaType = schemaType == null ? new Mixed(path) : schemaType;\n    this.$__runDeferred();\n  }\n\n  $init(key, value) {\n    checkValidKey(key);\n    super.set(key, value);\n\n    if (value != null && value.$isSingleNested) {\n      value.$basePath = this.$__path + '.' + key;\n    }\n  }\n\n  $__set(key, value) {\n    super.set(key, value);\n  }\n\n  set(key, value) {\n    checkValidKey(key); // Weird, but because you can't assign to `this` before calling `super()`\n    // you can't get access to `$__schemaType` to cast in the initial call to\n    // `set()` from the `super()` constructor.\n\n    if (this.$__schemaType == null) {\n      this.$__deferred = this.$__deferred || [];\n      this.$__deferred.push({\n        key: key,\n        value: value\n      });\n      return;\n    }\n\n    const fullPath = this.$__path + '.' + key;\n    const populated = this.$__parent != null && this.$__parent.$__ ? this.$__parent.populated(fullPath) || this.$__parent.populated(this.$__path) : null;\n\n    if (populated != null) {\n      if (value.$__ == null) {\n        value = new populated.options[populateModelSymbol](value);\n      }\n\n      value.$__.wasPopulated = true;\n    } else {\n      try {\n        value = this.$__schemaType.applySetters(value, this.$__parent, false, this.get(key));\n      } catch (error) {\n        if (this.$__parent != null && this.$__parent.$__ != null) {\n          this.$__parent.invalidate(fullPath, error);\n          return;\n        }\n\n        throw error;\n      }\n    }\n\n    super.set(key, value);\n\n    if (value != null && value.$isSingleNested) {\n      value.$basePath = this.$__path + '.' + key;\n    }\n\n    if (this.$__parent != null && this.$__parent.$__) {\n      this.$__parent.markModified(this.$__path + '.' + key);\n    }\n  }\n\n  delete(key) {\n    this.set(key, undefined);\n    super.delete(key);\n  }\n\n  toBSON() {\n    return new Map(this);\n  }\n\n  toObject(options) {\n    if (get(options, 'flattenMaps')) {\n      const ret = {};\n      const keys = this.keys();\n\n      for (const key of keys) {\n        ret[key] = this.get(key);\n      }\n\n      return ret;\n    }\n\n    return new Map(this);\n  }\n\n  toJSON() {\n    const ret = {};\n    const keys = this.keys();\n\n    for (const key of keys) {\n      ret[key] = this.get(key);\n    }\n\n    return ret;\n  }\n\n  inspect() {\n    return new Map(this);\n  }\n\n  $__runDeferred() {\n    if (!this.$__deferred) {\n      return;\n    }\n\n    for (let i = 0; i < this.$__deferred.length; ++i) {\n      this.set(this.$__deferred[i].key, this.$__deferred[i].value);\n    }\n\n    this.$__deferred = null;\n  }\n\n}\n\nif (util.inspect.custom) {\n  Object.defineProperty(MongooseMap.prototype, util.inspect.custom, {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: MongooseMap.prototype.inspect\n  });\n}\n\nObject.defineProperty(MongooseMap.prototype, '$__set', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\nObject.defineProperty(MongooseMap.prototype, '$__parent', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\nObject.defineProperty(MongooseMap.prototype, '$__path', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\nObject.defineProperty(MongooseMap.prototype, '$__schemaType', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\nObject.defineProperty(MongooseMap.prototype, '$isMongooseMap', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\nObject.defineProperty(MongooseMap.prototype, '$__deferredCalls', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\n/*!\n * Since maps are stored as objects under the hood, keys must be strings\n * and can't contain any invalid characters\n */\n\nfunction checkValidKey(key) {\n  const keyType = typeof key;\n\n  if (keyType !== 'string') {\n    throw new TypeError(`Mongoose maps only support string keys, got ${keyType}`);\n  }\n\n  if (key.startsWith('$')) {\n    throw new Error(`Mongoose maps do not support keys that start with \"$\", got \"${key}\"`);\n  }\n\n  if (key.includes('.')) {\n    throw new Error(`Mongoose maps do not support keys that contain \".\", got \"${key}\"`);\n  }\n\n  if (utils.specialProperties.has(key)) {\n    throw new Error(`Mongoose maps do not support reserved key name \"${key}\"`);\n  }\n}\n\nmodule.exports = MongooseMap;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/types/map.js"],"names":["Mixed","require","get","util","utils","populateModelSymbol","MongooseMap","Map","constructor","v","path","doc","schemaType","name","Object","keys","reduce","arr","key","concat","$__parent","$__","$__path","$__schemaType","$__runDeferred","$init","value","checkValidKey","set","$isSingleNested","$basePath","$__set","$__deferred","push","fullPath","populated","options","wasPopulated","applySetters","error","invalidate","markModified","delete","undefined","toBSON","toObject","ret","toJSON","inspect","i","length","custom","defineProperty","prototype","enumerable","writable","configurable","keyType","TypeError","startsWith","Error","includes","specialProperties","has","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Mixed = require('../schema/mixed');\nconst get = require('../helpers/get');\nconst util = require('util');\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\n/*!\n * ignore\n */\n\nclass MongooseMap extends Map {\n  constructor(v, path, doc, schemaType) {\n    if (v != null && v.constructor.name === 'Object') {\n      v = Object.keys(v).reduce((arr, key) => arr.concat([[key, v[key]]]), []);\n    }\n    super(v);\n\n    this.$__parent = doc != null && doc.$__ != null ? doc : null;\n    this.$__path = path;\n    this.$__schemaType = schemaType == null ? new Mixed(path) : schemaType;\n\n    this.$__runDeferred();\n  }\n\n  $init(key, value) {\n    checkValidKey(key);\n\n    super.set(key, value);\n\n    if (value != null && value.$isSingleNested) {\n      value.$basePath = this.$__path + '.' + key;\n    }\n  }\n\n  $__set(key, value) {\n    super.set(key, value);\n  }\n\n  set(key, value) {\n    checkValidKey(key);\n\n    // Weird, but because you can't assign to `this` before calling `super()`\n    // you can't get access to `$__schemaType` to cast in the initial call to\n    // `set()` from the `super()` constructor.\n\n    if (this.$__schemaType == null) {\n      this.$__deferred = this.$__deferred || [];\n      this.$__deferred.push({ key: key, value: value });\n      return;\n    }\n\n    const fullPath = this.$__path + '.' + key;\n    const populated = this.$__parent != null && this.$__parent.$__ ?\n      this.$__parent.populated(fullPath) || this.$__parent.populated(this.$__path) :\n      null;\n\n    if (populated != null) {\n      if (value.$__ == null) {\n        value = new populated.options[populateModelSymbol](value);\n      }\n      value.$__.wasPopulated = true;\n    } else {\n      try {\n        value = this.$__schemaType.\n          applySetters(value, this.$__parent, false, this.get(key));\n      } catch (error) {\n        if (this.$__parent != null && this.$__parent.$__ != null) {\n          this.$__parent.invalidate(fullPath, error);\n          return;\n        }\n        throw error;\n      }\n    }\n\n    super.set(key, value);\n\n    if (value != null && value.$isSingleNested) {\n      value.$basePath = this.$__path + '.' + key;\n    }\n\n    if (this.$__parent != null && this.$__parent.$__) {\n      this.$__parent.markModified(this.$__path + '.' + key);\n    }\n  }\n\n  delete(key) {\n    this.set(key, undefined);\n    super.delete(key);\n  }\n\n  toBSON() {\n    return new Map(this);\n  }\n\n  toObject(options) {\n    if (get(options, 'flattenMaps')) {\n      const ret = {};\n      const keys = this.keys();\n      for (const key of keys) {\n        ret[key] = this.get(key);\n      }\n      return ret;\n    }\n\n    return new Map(this);\n  }\n\n  toJSON() {\n    const ret = {};\n    const keys = this.keys();\n    for (const key of keys) {\n      ret[key] = this.get(key);\n    }\n    return ret;\n  }\n\n  inspect() {\n    return new Map(this);\n  }\n\n  $__runDeferred() {\n    if (!this.$__deferred) {\n      return;\n    }\n    for (let i = 0; i < this.$__deferred.length; ++i) {\n      this.set(this.$__deferred[i].key, this.$__deferred[i].value);\n    }\n    this.$__deferred = null;\n  }\n}\n\nif (util.inspect.custom) {\n  Object.defineProperty(MongooseMap.prototype, util.inspect.custom, {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: MongooseMap.prototype.inspect\n  });\n}\n\nObject.defineProperty(MongooseMap.prototype, '$__set', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__parent', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__path', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__schemaType', {\n  enumerable: false,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(MongooseMap.prototype, '$isMongooseMap', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\n\nObject.defineProperty(MongooseMap.prototype, '$__deferredCalls', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: true\n});\n\n/*!\n * Since maps are stored as objects under the hood, keys must be strings\n * and can't contain any invalid characters\n */\n\nfunction checkValidKey(key) {\n  const keyType = typeof key;\n  if (keyType !== 'string') {\n    throw new TypeError(`Mongoose maps only support string keys, got ${keyType}`);\n  }\n  if (key.startsWith('$')) {\n    throw new Error(`Mongoose maps do not support keys that start with \"$\", got \"${key}\"`);\n  }\n  if (key.includes('.')) {\n    throw new Error(`Mongoose maps do not support keys that contain \".\", got \"${key}\"`);\n  }\n  if (utils.specialProperties.has(key)) {\n    throw new Error(`Mongoose maps do not support reserved key name \"${key}\"`);\n  }\n}\n\nmodule.exports = MongooseMap;\n"]},"metadata":{},"sourceType":"script"}