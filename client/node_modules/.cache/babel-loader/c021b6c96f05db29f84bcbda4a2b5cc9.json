{"ast":null,"code":"'use strict';\n/**\n * methods a collection must implement\n */\n\nvar methods = ['find', 'findOne', 'update', 'updateMany', 'updateOne', 'replaceOne', 'remove', 'count', 'distinct', 'findAndModify', 'aggregate', 'findStream', 'deleteOne', 'deleteMany'];\n/**\n * Collection base class from which implementations inherit\n */\n\nfunction Collection() {}\n\nfor (var i = 0, len = methods.length; i < len; ++i) {\n  var method = methods[i];\n  Collection.prototype[method] = notImplemented(method);\n}\n\nmodule.exports = exports = Collection;\nCollection.methods = methods;\n/**\n * creates a function which throws an implementation error\n */\n\nfunction notImplemented(method) {\n  return function () {\n    throw new Error('collection.' + method + ' not implemented');\n  };\n}","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mquery/lib/collection/collection.js"],"names":["methods","Collection","i","len","length","method","prototype","notImplemented","module","exports","Error"],"mappings":"AAAA;AAEA;;;;AAIA,IAAIA,OAAO,GAAG,CACZ,MADY,EAEZ,SAFY,EAGZ,QAHY,EAIZ,YAJY,EAKZ,WALY,EAMZ,YANY,EAOZ,QAPY,EAQZ,OARY,EASZ,UATY,EAUZ,eAVY,EAWZ,WAXY,EAYZ,YAZY,EAaZ,WAbY,EAcZ,YAdY,CAAd;AAiBA;;;;AAIA,SAASC,UAAT,GAAsB,CAAE;;AAExB,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,OAAO,CAACI,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+C,EAAED,CAAjD,EAAoD;AAClD,MAAIG,MAAM,GAAGL,OAAO,CAACE,CAAD,CAApB;AACAD,EAAAA,UAAU,CAACK,SAAX,CAAqBD,MAArB,IAA+BE,cAAc,CAACF,MAAD,CAA7C;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGR,UAA3B;AACAA,UAAU,CAACD,OAAX,GAAqBA,OAArB;AAEA;;;;AAIA,SAASO,cAAT,CAAwBF,MAAxB,EAAgC;AAC9B,SAAO,YAAW;AAChB,UAAM,IAAIK,KAAJ,CAAU,gBAAgBL,MAAhB,GAAyB,kBAAnC,CAAN;AACD,GAFD;AAGD","sourcesContent":["'use strict';\n\n/**\n * methods a collection must implement\n */\n\nvar methods = [\n  'find',\n  'findOne',\n  'update',\n  'updateMany',\n  'updateOne',\n  'replaceOne',\n  'remove',\n  'count',\n  'distinct',\n  'findAndModify',\n  'aggregate',\n  'findStream',\n  'deleteOne',\n  'deleteMany'\n];\n\n/**\n * Collection base class from which implementations inherit\n */\n\nfunction Collection() {}\n\nfor (var i = 0, len = methods.length; i < len; ++i) {\n  var method = methods[i];\n  Collection.prototype[method] = notImplemented(method);\n}\n\nmodule.exports = exports = Collection;\nCollection.methods = methods;\n\n/**\n * creates a function which throws an implementation error\n */\n\nfunction notImplemented(method) {\n  return function() {\n    throw new Error('collection.' + method + ' not implemented');\n  };\n}\n"]},"metadata":{},"sourceType":"script"}