{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\n\nconst SchemaType = require('../schematype');\n\nconst castBoolean = require('../cast/boolean');\n\nconst utils = require('../utils');\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaBoolean.schemaName = 'Boolean';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = v => {\n      if (v != null && typeof v !== 'boolean') {\n        throw new Error();\n      }\n\n      return v;\n    };\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/*!\n * ignore\n */\n\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function (value) {\n  return this.constructor._checkRequired(value);\n};\n/**\n * Configure which values get casted to `true`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @type Set\n * @api public\n */\n\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => {\n    castBoolean.convertToTrue = v;\n  }\n});\n/**\n * Configure which values get casted to `false`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => {\n    castBoolean.convertToFalse = v;\n  }\n});\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function (value) {\n  const castBoolean = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaBoolean.cast();\n\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path);\n  }\n};\n\nSchemaBoolean.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaBoolean;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/schema/boolean.js"],"names":["CastError","require","SchemaType","castBoolean","utils","SchemaBoolean","path","options","call","schemaName","prototype","Object","create","constructor","_cast","cast","caster","arguments","length","v","Error","_checkRequired","checkRequired","value","defineProperty","get","convertToTrue","set","convertToFalse","error","$conditionalHandlers","castForQuery","$conditional","val","handler","_castForQuery","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schematype');\nconst castBoolean = require('../cast/boolean');\nconst utils = require('../utils');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = v => {\n      if (v != null && typeof v !== 'boolean') {\n        throw new Error();\n      }\n      return v;\n    };\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Configure which values get casted to `true`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => { castBoolean.convertToTrue = v; }\n});\n\n/**\n * Configure which values get casted to `false`.\n *\n * ####Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @type Set\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => { castBoolean.convertToFalse = v; }\n});\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  const castBoolean = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaBoolean.cast();\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path);\n  }\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"]},"metadata":{},"sourceType":"script"}