{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './Type';\nimport { setAlert } from './alertAction';\nimport setAuthToken from '../utils/setAuthToken';\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/client/src/action/authAction.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAlert","setAuthToken","loadUser","dispatch","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA0BC,aAA1B,EAAwCC,WAAxC,EAAoDC,UAApD,QAAqE,QAArE;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAK,MAAMC,QAAN,IAAiB;AAE1C,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,WAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACR,WADA;AAELS,MAAAA,OAAO,EAACH,GAAG,CAACI;AAFP,KAAD,CAAR;AAIH,GAPD,CAOE,OAAOC,GAAP,EAAY;AACVN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACP;AADA,KAAD,CAAR;AAGH;AACJ,CAdM;AAgBP,OAAO,MAAMW,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,KAAN;AAAYC,EAAAA;AAAZ,CAAD,KAA0B,MAAMV,QAAN,IAAiB;AAC/D,QAAMW,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAC;AACJ,sBAAgB;AADZ;AADG,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA;AAAZ,GAAf,CAAb;;AAEA,MAAG;AACC,UAAMT,GAAG,GAAG,MAAMT,KAAK,CAACwB,IAAN,CAAW,YAAX,EAAwBH,IAAxB,EAA6BF,MAA7B,CAAlB;AAEAX,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACV,gBADA;AAELW,MAAAA,OAAO,EAACH,GAAG,CAACI;AAFP,KAAD,CAAR;AAKH,GARD,CAQC,OAAMC,GAAN,EAAU;AACP,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AAEA,QAAGA,MAAH,EAAU;AACNA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAI;AAAEpB,QAAAA,QAAQ,CAACH,QAAQ,CAACuB,KAAK,CAACC,GAAP,EAAW,QAAX,CAAT,CAAR;AACzB,OADD;AAEH;;AACDrB,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACT;AADA,KAAD,CAAR;AAKH;AACJ,CA7BM","sourcesContent":["import axios from 'axios';\r\nimport { REGISTER_SUCCESS,REGISTER_FAIL,USER_LOADED,AUTH_ERROR} from './Type';\r\nimport { setAlert } from './alertAction';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\nexport const loadUser = () =>async dispatch =>{\r\n   \r\n    try {\r\n        const res = await axios.get('/api/auth');\r\n        \r\n        dispatch({\r\n            type:USER_LOADED,\r\n            payload:res.data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        })\r\n    }\r\n} \r\n\r\nexport const register = ({name,email,password}) =>async dispatch =>{\r\n    const config = {\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({name,email,password});\r\n\r\n    try{\r\n        const res = await axios.post('/api/users',body,config);\r\n\r\n        dispatch({\r\n            type:REGISTER_SUCCESS,\r\n            payload:res.data\r\n        })\r\n\r\n    }catch(err){\r\n        const errors = err.response.data.errors;\r\n\r\n        if(errors){\r\n            errors.forEach(error => { dispatch(setAlert(error.msg,'danger'))                \r\n            });\r\n        }\r\n        dispatch({\r\n            type:REGISTER_FAIL,\r\n\r\n        })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}