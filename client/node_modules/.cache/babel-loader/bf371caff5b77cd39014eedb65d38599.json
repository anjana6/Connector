{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst ObjectExpectedError = require('../error/objectExpected');\n\nconst SchemaType = require('../schematype');\n\nconst $exists = require('./operators/exists');\n\nconst castToNumber = require('./operators/helpers').castToNumber;\n\nconst discriminator = require('../helpers/model/discriminator');\n\nconst geospatial = require('./operators/geospatial');\n\nconst get = require('../helpers/get');\n\nconst getConstructor = require('../helpers/discriminator/getConstructor');\n\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\n\nlet Subdocument;\nmodule.exports = SingleNestedPath;\n/**\n * Single nested subdocument SchemaType constructor.\n *\n * @param {Schema} schema\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SingleNestedPath(schema, path, options) {\n  this.caster = _createConstructor(schema);\n  this.caster.path = path;\n  this.caster.prototype.$basePath = path;\n  this.schema = schema;\n  this.$isSingleNested = true;\n  SchemaType.call(this, path, options, 'Embedded');\n}\n/*!\n * ignore\n */\n\n\nSingleNestedPath.prototype = Object.create(SchemaType.prototype);\nSingleNestedPath.prototype.constructor = SingleNestedPath;\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema, baseClass) {\n  // lazy load\n  Subdocument || (Subdocument = require('../types/subdocument'));\n\n  const _embedded = function SingleNested(value, path, parent) {\n    const _this = this;\n\n    this.$parent = parent;\n    Subdocument.apply(this, arguments);\n    this.$session(this.ownerDocument().$session());\n\n    if (parent) {\n      parent.on('save', function () {\n        _this.emit('save', _this);\n\n        _this.constructor.emit('save', _this);\n      });\n      parent.on('isNew', function (val) {\n        _this.isNew = val;\n\n        _this.emit('isNew', val);\n\n        _this.constructor.emit('isNew', val);\n      });\n    }\n  };\n\n  const proto = baseClass != null ? baseClass.prototype : Subdocument.prototype;\n  _embedded.prototype = Object.create(proto);\n\n  _embedded.prototype.$__setSchema(schema);\n\n  _embedded.prototype.constructor = _embedded;\n  _embedded.schema = schema;\n  _embedded.$isSingleNested = true;\n  _embedded.events = new EventEmitter();\n\n  _embedded.prototype.toBSON = function () {\n    return this.toObject(internalToObjectOptions);\n  }; // apply methods\n\n\n  for (const i in schema.methods) {\n    _embedded.prototype[i] = schema.methods[i];\n  } // apply statics\n\n\n  for (const i in schema.statics) {\n    _embedded[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    _embedded[i] = EventEmitter.prototype[i];\n  }\n\n  return _embedded;\n}\n/*!\n * Special case for when users use a common location schema to represent\n * locations for use with $geoWithin.\n * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/\n *\n * @param {Object} val\n * @api private\n */\n\n\nSingleNestedPath.prototype.$conditionalHandlers.$geoWithin = function handle$geoWithin(val) {\n  return {\n    $geometry: this.castForQuery(val.$geometry)\n  };\n};\n/*!\n * ignore\n */\n\n\nSingleNestedPath.prototype.$conditionalHandlers.$near = SingleNestedPath.prototype.$conditionalHandlers.$nearSphere = geospatial.cast$near;\nSingleNestedPath.prototype.$conditionalHandlers.$within = SingleNestedPath.prototype.$conditionalHandlers.$geoWithin = geospatial.cast$within;\nSingleNestedPath.prototype.$conditionalHandlers.$geoIntersects = geospatial.cast$geoIntersects;\nSingleNestedPath.prototype.$conditionalHandlers.$minDistance = castToNumber;\nSingleNestedPath.prototype.$conditionalHandlers.$maxDistance = castToNumber;\nSingleNestedPath.prototype.$conditionalHandlers.$exists = $exists;\n/**\n * Casts contents\n *\n * @param {Object} value\n * @api private\n */\n\nSingleNestedPath.prototype.cast = function (val, doc, init, priorVal) {\n  if (val && val.$isSingleNested) {\n    return val;\n  }\n\n  if (val != null && (typeof val !== 'object' || Array.isArray(val))) {\n    throw new ObjectExpectedError(this.path, val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n  let subdoc; // Only pull relevant selected paths and pull out the base path\n\n  const parentSelected = get(doc, '$__.selected', {});\n  const path = this.path;\n  const selected = Object.keys(parentSelected).reduce((obj, key) => {\n    if (key.startsWith(path + '.')) {\n      obj[key.substr(path.length + 1)] = parentSelected[key];\n    }\n\n    return obj;\n  }, {});\n\n  if (init) {\n    subdoc = new Constructor(void 0, selected, doc);\n    subdoc.init(val);\n  } else {\n    if (Object.keys(val).length === 0) {\n      return new Constructor({}, selected, doc);\n    }\n\n    return new Constructor(val, selected, doc, undefined, {\n      priorDoc: priorVal\n    });\n  }\n\n  return subdoc;\n};\n/**\n * Casts contents for query\n *\n * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)\n * @param {any} value\n * @api private\n */\n\n\nSingleNestedPath.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  if (val == null) {\n    return val;\n  }\n\n  if (this.options.runSetters) {\n    val = this._applySetters(val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n\n  try {\n    val = new Constructor(val);\n  } catch (error) {\n    // Make sure we always wrap in a CastError (gh-6803)\n    if (!(error instanceof CastError)) {\n      throw new CastError('Embedded', val, this.path, error);\n    }\n\n    throw error;\n  }\n\n  return val;\n};\n/**\n * Async validation on this single nested doc.\n *\n * @api private\n */\n\n\nSingleNestedPath.prototype.doValidate = function (value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (options && options.skipSchemaValidators) {\n    if (!(value instanceof Constructor)) {\n      value = new Constructor(value, null, scope);\n    }\n\n    return value.validate(fn);\n  }\n\n  SchemaType.prototype.doValidate.call(this, value, function (error) {\n    if (error) {\n      return fn(error);\n    }\n\n    if (!value) {\n      return fn(null);\n    }\n\n    value.validate(fn);\n  }, scope);\n};\n/**\n * Synchronously validate this single nested doc\n *\n * @api private\n */\n\n\nSingleNestedPath.prototype.doValidateSync = function (value, scope, options) {\n  if (!options || !options.skipSchemaValidators) {\n    const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, value, scope);\n\n    if (schemaTypeError) {\n      return schemaTypeError;\n    }\n  }\n\n  if (!value) {\n    return;\n  }\n\n  return value.validateSync();\n};\n/**\n * Adds a discriminator to this single nested subdocument.\n *\n * ####Example:\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shape: shapeSchema });\n *\n *     const singleNestedPath = parentSchema.path('shape');\n *     singleNestedPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {String} [value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @see discriminators /docs/discriminators.html\n * @api public\n */\n\n\nSingleNestedPath.prototype.discriminator = function (name, schema, value) {\n  discriminator(this.caster, name, schema, value);\n  this.caster.discriminators[name] = _createConstructor(schema, this.caster);\n  return this.caster.discriminators[name];\n};\n/*!\n * ignore\n */\n\n\nSingleNestedPath.prototype.clone = function () {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.schema, this.path, options);\n  schematype.validators = this.validators.slice();\n  schematype.caster.discriminators = Object.assign({}, this.caster.discriminators);\n  return schematype;\n};","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/schema/SingleNestedPath.js"],"names":["CastError","require","EventEmitter","ObjectExpectedError","SchemaType","$exists","castToNumber","discriminator","geospatial","get","getConstructor","internalToObjectOptions","Subdocument","module","exports","SingleNestedPath","schema","path","options","caster","_createConstructor","prototype","$basePath","$isSingleNested","call","Object","create","constructor","baseClass","_embedded","SingleNested","value","parent","_this","$parent","apply","arguments","$session","ownerDocument","on","emit","val","isNew","proto","$__setSchema","events","toBSON","toObject","i","methods","statics","$conditionalHandlers","$geoWithin","handle$geoWithin","$geometry","castForQuery","$near","$nearSphere","cast$near","$within","cast$within","$geoIntersects","cast$geoIntersects","$minDistance","$maxDistance","cast","doc","init","priorVal","Array","isArray","Constructor","subdoc","parentSelected","selected","keys","reduce","obj","key","startsWith","substr","length","undefined","priorDoc","$conditional","handler","Error","runSetters","_applySetters","error","doValidate","fn","scope","skipSchemaValidators","validate","doValidateSync","schemaTypeError","validateSync","name","discriminators","clone","assign","schematype","validators","slice"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst EventEmitter = require('events').EventEmitter;\nconst ObjectExpectedError = require('../error/objectExpected');\nconst SchemaType = require('../schematype');\nconst $exists = require('./operators/exists');\nconst castToNumber = require('./operators/helpers').castToNumber;\nconst discriminator = require('../helpers/model/discriminator');\nconst geospatial = require('./operators/geospatial');\nconst get = require('../helpers/get');\nconst getConstructor = require('../helpers/discriminator/getConstructor');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\n\nlet Subdocument;\n\nmodule.exports = SingleNestedPath;\n\n/**\n * Single nested subdocument SchemaType constructor.\n *\n * @param {Schema} schema\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SingleNestedPath(schema, path, options) {\n  this.caster = _createConstructor(schema);\n  this.caster.path = path;\n  this.caster.prototype.$basePath = path;\n  this.schema = schema;\n  this.$isSingleNested = true;\n  SchemaType.call(this, path, options, 'Embedded');\n}\n\n/*!\n * ignore\n */\n\nSingleNestedPath.prototype = Object.create(SchemaType.prototype);\nSingleNestedPath.prototype.constructor = SingleNestedPath;\n\n/*!\n * ignore\n */\n\nfunction _createConstructor(schema, baseClass) {\n  // lazy load\n  Subdocument || (Subdocument = require('../types/subdocument'));\n\n  const _embedded = function SingleNested(value, path, parent) {\n    const _this = this;\n\n    this.$parent = parent;\n    Subdocument.apply(this, arguments);\n\n    this.$session(this.ownerDocument().$session());\n\n    if (parent) {\n      parent.on('save', function() {\n        _this.emit('save', _this);\n        _this.constructor.emit('save', _this);\n      });\n\n      parent.on('isNew', function(val) {\n        _this.isNew = val;\n        _this.emit('isNew', val);\n        _this.constructor.emit('isNew', val);\n      });\n    }\n  };\n\n  const proto = baseClass != null ? baseClass.prototype : Subdocument.prototype;\n  _embedded.prototype = Object.create(proto);\n  _embedded.prototype.$__setSchema(schema);\n  _embedded.prototype.constructor = _embedded;\n  _embedded.schema = schema;\n  _embedded.$isSingleNested = true;\n  _embedded.events = new EventEmitter();\n  _embedded.prototype.toBSON = function() {\n    return this.toObject(internalToObjectOptions);\n  };\n\n  // apply methods\n  for (const i in schema.methods) {\n    _embedded.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (const i in schema.statics) {\n    _embedded[i] = schema.statics[i];\n  }\n\n  for (const i in EventEmitter.prototype) {\n    _embedded[i] = EventEmitter.prototype[i];\n  }\n\n  return _embedded;\n}\n\n/*!\n * Special case for when users use a common location schema to represent\n * locations for use with $geoWithin.\n * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/\n *\n * @param {Object} val\n * @api private\n */\n\nSingleNestedPath.prototype.$conditionalHandlers.$geoWithin = function handle$geoWithin(val) {\n  return { $geometry: this.castForQuery(val.$geometry) };\n};\n\n/*!\n * ignore\n */\n\nSingleNestedPath.prototype.$conditionalHandlers.$near =\nSingleNestedPath.prototype.$conditionalHandlers.$nearSphere = geospatial.cast$near;\n\nSingleNestedPath.prototype.$conditionalHandlers.$within =\nSingleNestedPath.prototype.$conditionalHandlers.$geoWithin = geospatial.cast$within;\n\nSingleNestedPath.prototype.$conditionalHandlers.$geoIntersects =\n  geospatial.cast$geoIntersects;\n\nSingleNestedPath.prototype.$conditionalHandlers.$minDistance = castToNumber;\nSingleNestedPath.prototype.$conditionalHandlers.$maxDistance = castToNumber;\n\nSingleNestedPath.prototype.$conditionalHandlers.$exists = $exists;\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @api private\n */\n\nSingleNestedPath.prototype.cast = function(val, doc, init, priorVal) {\n  if (val && val.$isSingleNested) {\n    return val;\n  }\n\n  if (val != null && (typeof val !== 'object' || Array.isArray(val))) {\n    throw new ObjectExpectedError(this.path, val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n\n  let subdoc;\n\n  // Only pull relevant selected paths and pull out the base path\n  const parentSelected = get(doc, '$__.selected', {});\n  const path = this.path;\n  const selected = Object.keys(parentSelected).reduce((obj, key) => {\n    if (key.startsWith(path + '.')) {\n      obj[key.substr(path.length + 1)] = parentSelected[key];\n    }\n    return obj;\n  }, {});\n\n  if (init) {\n    subdoc = new Constructor(void 0, selected, doc);\n    subdoc.init(val);\n  } else {\n    if (Object.keys(val).length === 0) {\n      return new Constructor({}, selected, doc);\n    }\n\n    return new Constructor(val, selected, doc, undefined, { priorDoc: priorVal });\n  }\n\n  return subdoc;\n};\n\n/**\n * Casts contents for query\n *\n * @param {string} [$conditional] optional query operator (like `$eq` or `$in`)\n * @param {any} value\n * @api private\n */\n\nSingleNestedPath.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional);\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (val == null) {\n    return val;\n  }\n\n  if (this.options.runSetters) {\n    val = this._applySetters(val);\n  }\n\n  const Constructor = getConstructor(this.caster, val);\n\n  try {\n    val = new Constructor(val);\n  } catch (error) {\n    // Make sure we always wrap in a CastError (gh-6803)\n    if (!(error instanceof CastError)) {\n      throw new CastError('Embedded', val, this.path, error);\n    }\n    throw error;\n  }\n  return val;\n};\n\n/**\n * Async validation on this single nested doc.\n *\n * @api private\n */\n\nSingleNestedPath.prototype.doValidate = function(value, fn, scope, options) {\n  const Constructor = getConstructor(this.caster, value);\n\n  if (options && options.skipSchemaValidators) {\n    if (!(value instanceof Constructor)) {\n      value = new Constructor(value, null, scope);\n    }\n\n    return value.validate(fn);\n  }\n\n  SchemaType.prototype.doValidate.call(this, value, function(error) {\n    if (error) {\n      return fn(error);\n    }\n    if (!value) {\n      return fn(null);\n    }\n\n    value.validate(fn);\n  }, scope);\n};\n\n/**\n * Synchronously validate this single nested doc\n *\n * @api private\n */\n\nSingleNestedPath.prototype.doValidateSync = function(value, scope, options) {\n  if (!options || !options.skipSchemaValidators) {\n    const schemaTypeError = SchemaType.prototype.doValidateSync.call(this, value, scope);\n    if (schemaTypeError) {\n      return schemaTypeError;\n    }\n  }\n  if (!value) {\n    return;\n  }\n  return value.validateSync();\n};\n\n/**\n * Adds a discriminator to this single nested subdocument.\n *\n * ####Example:\n *     const shapeSchema = Schema({ name: String }, { discriminatorKey: 'kind' });\n *     const schema = Schema({ shape: shapeSchema });\n *\n *     const singleNestedPath = parentSchema.path('shape');\n *     singleNestedPath.discriminator('Circle', Schema({ radius: Number }));\n *\n * @param {String} name\n * @param {Schema} schema fields to add to the schema for instances of this sub-class\n * @param {String} [value] the string stored in the `discriminatorKey` property. If not specified, Mongoose uses the `name` parameter.\n * @return {Function} the constructor Mongoose will use for creating instances of this discriminator model\n * @see discriminators /docs/discriminators.html\n * @api public\n */\n\nSingleNestedPath.prototype.discriminator = function(name, schema, value) {\n  discriminator(this.caster, name, schema, value);\n\n  this.caster.discriminators[name] = _createConstructor(schema, this.caster);\n\n  return this.caster.discriminators[name];\n};\n\n/*!\n * ignore\n */\n\nSingleNestedPath.prototype.clone = function() {\n  const options = Object.assign({}, this.options);\n  const schematype = new this.constructor(this.schema, this.path, options);\n  schematype.validators = this.validators.slice();\n  schematype.caster.discriminators = Object.assign({}, this.caster.discriminators);\n  return schematype;\n};\n"]},"metadata":{},"sourceType":"script"}