{"ast":null,"code":"'use strict';\n\nconst get = require('../get');\n\nconst utils = require('../../utils');\n/*!\n * Gather all indexes defined in the schema, including single nested,\n * document arrays, and embedded discriminators.\n */\n\n\nmodule.exports = function getIndexes(schema) {\n  let indexes = [];\n  const schemaStack = new WeakMap();\n  const indexTypes = schema.constructor.indexTypes;\n\n  const collectIndexes = function (schema, prefix, baseSchema) {\n    // Ignore infinitely nested schemas, if we've already seen this schema\n    // along this path there must be a cycle\n    if (schemaStack.has(schema)) {\n      return;\n    }\n\n    schemaStack.set(schema, true);\n    prefix = prefix || '';\n    const keys = Object.keys(schema.paths);\n    const length = keys.length;\n\n    for (let i = 0; i < length; ++i) {\n      const key = keys[i];\n      const path = schema.paths[key];\n\n      if (baseSchema != null && baseSchema.paths[key]) {\n        // If looking at an embedded discriminator schema, don't look at paths\n        // that the\n        continue;\n      }\n\n      if (path.$isMongooseDocumentArray || path.$isSingleNested) {\n        if (get(path, 'options.excludeIndexes') !== true && get(path, 'schemaOptions.excludeIndexes') !== true && get(path, 'schema.options.excludeIndexes') !== true) {\n          collectIndexes(path.schema, prefix + key + '.');\n        }\n\n        if (path.schema.discriminators != null) {\n          const discriminators = path.schema.discriminators;\n          const discriminatorKeys = Object.keys(discriminators);\n\n          for (const discriminatorKey of discriminatorKeys) {\n            collectIndexes(discriminators[discriminatorKey], prefix + key + '.', path.schema);\n          }\n        } // Retained to minimize risk of backwards breaking changes due to\n        // gh-6113\n\n\n        if (path.$isMongooseDocumentArray) {\n          continue;\n        }\n      }\n\n      const index = path._index || path.caster && path.caster._index;\n\n      if (index !== false && index !== null && index !== undefined) {\n        const field = {};\n        const isObject = utils.isObject(index);\n        const options = isObject ? index : {};\n        const type = typeof index === 'string' ? index : isObject ? index.type : false;\n\n        if (type && indexTypes.indexOf(type) !== -1) {\n          field[prefix + key] = type;\n        } else if (options.text) {\n          field[prefix + key] = 'text';\n          delete options.text;\n        } else {\n          field[prefix + key] = 1;\n        }\n\n        delete options.type;\n\n        if (!('background' in options)) {\n          options.background = true;\n        }\n\n        indexes.push([field, options]);\n      }\n    }\n\n    schemaStack.delete(schema);\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function (index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n\n      indexes = indexes.concat(schema._indexes);\n    }\n  };\n\n  collectIndexes(schema);\n  return indexes;\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    const subindexes = schema._indexes;\n    const len = subindexes.length;\n\n    for (let i = 0; i < len; ++i) {\n      const indexObj = subindexes[i][0];\n      const keys = Object.keys(indexObj);\n      const klen = keys.length;\n      const newindex = {}; // use forward iteration, order matters\n\n      for (let j = 0; j < klen; ++j) {\n        const key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      indexes.push([newindex, subindexes[i][1]]);\n    }\n  }\n};","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/helpers/schema/getIndexes.js"],"names":["get","require","utils","module","exports","getIndexes","schema","indexes","schemaStack","WeakMap","indexTypes","constructor","collectIndexes","prefix","baseSchema","has","set","keys","Object","paths","length","i","key","path","$isMongooseDocumentArray","$isSingleNested","discriminators","discriminatorKeys","discriminatorKey","index","_index","caster","undefined","field","isObject","options","type","indexOf","text","background","push","delete","fixSubIndexPaths","_indexes","forEach","concat","subindexes","len","indexObj","klen","newindex","j"],"mappings":"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","sourcesContent":["'use strict';\n\nconst get = require('../get');\nconst utils = require('../../utils');\n\n/*!\n * Gather all indexes defined in the schema, including single nested,\n * document arrays, and embedded discriminators.\n */\n\nmodule.exports = function getIndexes(schema) {\n  let indexes = [];\n  const schemaStack = new WeakMap();\n  const indexTypes = schema.constructor.indexTypes;\n\n  const collectIndexes = function(schema, prefix, baseSchema) {\n    // Ignore infinitely nested schemas, if we've already seen this schema\n    // along this path there must be a cycle\n    if (schemaStack.has(schema)) {\n      return;\n    }\n    schemaStack.set(schema, true);\n\n    prefix = prefix || '';\n    const keys = Object.keys(schema.paths);\n    const length = keys.length;\n\n    for (let i = 0; i < length; ++i) {\n      const key = keys[i];\n      const path = schema.paths[key];\n      if (baseSchema != null && baseSchema.paths[key]) {\n        // If looking at an embedded discriminator schema, don't look at paths\n        // that the\n        continue;\n      }\n\n      if (path.$isMongooseDocumentArray || path.$isSingleNested) {\n        if (get(path, 'options.excludeIndexes') !== true &&\n            get(path, 'schemaOptions.excludeIndexes') !== true &&\n            get(path, 'schema.options.excludeIndexes') !== true) {\n          collectIndexes(path.schema, prefix + key + '.');\n        }\n\n        if (path.schema.discriminators != null) {\n          const discriminators = path.schema.discriminators;\n          const discriminatorKeys = Object.keys(discriminators);\n          for (const discriminatorKey of discriminatorKeys) {\n            collectIndexes(discriminators[discriminatorKey],\n              prefix + key + '.', path.schema);\n          }\n        }\n\n        // Retained to minimize risk of backwards breaking changes due to\n        // gh-6113\n        if (path.$isMongooseDocumentArray) {\n          continue;\n        }\n      }\n\n      const index = path._index || (path.caster && path.caster._index);\n\n      if (index !== false && index !== null && index !== undefined) {\n        const field = {};\n        const isObject = utils.isObject(index);\n        const options = isObject ? index : {};\n        const type = typeof index === 'string' ? index :\n          isObject ? index.type :\n            false;\n\n        if (type && indexTypes.indexOf(type) !== -1) {\n          field[prefix + key] = type;\n        } else if (options.text) {\n          field[prefix + key] = 'text';\n          delete options.text;\n        } else {\n          field[prefix + key] = 1;\n        }\n\n        delete options.type;\n        if (!('background' in options)) {\n          options.background = true;\n        }\n\n        indexes.push([field, options]);\n      }\n    }\n\n    schemaStack.delete(schema);\n\n    if (prefix) {\n      fixSubIndexPaths(schema, prefix);\n    } else {\n      schema._indexes.forEach(function(index) {\n        if (!('background' in index[1])) {\n          index[1].background = true;\n        }\n      });\n      indexes = indexes.concat(schema._indexes);\n    }\n  };\n\n  collectIndexes(schema);\n  return indexes;\n\n  /*!\n   * Checks for indexes added to subdocs using Schema.index().\n   * These indexes need their paths prefixed properly.\n   *\n   * schema._indexes = [ [indexObj, options], [indexObj, options] ..]\n   */\n\n  function fixSubIndexPaths(schema, prefix) {\n    const subindexes = schema._indexes;\n    const len = subindexes.length;\n    for (let i = 0; i < len; ++i) {\n      const indexObj = subindexes[i][0];\n      const keys = Object.keys(indexObj);\n      const klen = keys.length;\n      const newindex = {};\n\n      // use forward iteration, order matters\n      for (let j = 0; j < klen; ++j) {\n        const key = keys[j];\n        newindex[prefix + key] = indexObj[key];\n      }\n\n      indexes.push([newindex, subindexes[i][1]]);\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}