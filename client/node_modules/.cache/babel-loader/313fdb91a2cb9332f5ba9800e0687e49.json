{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst SchemaObjectIdOptions = require('../options/SchemaObjectIdOptions');\n\nconst SchemaType = require('../schematype');\n\nconst castObjectId = require('../cast/objectid');\n\nconst oid = require('../types/objectid');\n\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst CastError = SchemaType.CastError;\nlet Document;\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    console.warn('mongoose: To create a new ObjectId please try ' + '`Mongoose.Types.ObjectId` instead of using ' + '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' + 'you\\'re trying to create a hex char path in your schema.');\n    console.trace();\n  }\n\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nObjectId.schemaName = 'ObjectId';\n/*!\n * Inherits from SchemaType.\n */\n\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\nObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n/**\n * Attaches a getter for all ObjectId instances\n *\n * ####Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.get = SchemaType.get;\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function (turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nObjectId._checkRequired = v => v instanceof oid;\n/*!\n * ignore\n */\n\n\nObjectId._cast = castObjectId;\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * ####Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = v => {\n      if (!(v instanceof oid)) {\n        throw new Error();\n      }\n\n      return v;\n    };\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nObjectId.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ? this.constructor.checkRequired() : ObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\n\nObjectId.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (value instanceof oid) {\n      return value;\n    } else if ((value.constructor.name || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('ObjectId', value, this.path);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    let ret = value;\n\n    if (!doc.$__.populated || !doc.$__.populated[path] || !doc.$__.populated[path].options || !doc.$__.populated[path].options.options || !doc.$__.populated[path].options.options.lean) {\n      ret = new pop.options[populateModelSymbol](value);\n      ret.$__.wasPopulated = true;\n    }\n\n    return ret;\n  }\n\n  const castObjectId = typeof this.constructor.cast === 'function' ? this.constructor.cast() : ObjectId.cast();\n\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid();\n\n      this.$__._id = _v;\n      return _v;\n    }\n\n    this.$__._id = v;\n  }\n\n  return v;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = ObjectId;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/schema/objectid.js"],"names":["SchemaObjectIdOptions","require","SchemaType","castObjectId","oid","utils","populateModelSymbol","CastError","Document","ObjectId","key","options","isKeyHexStr","length","test","suppressWarning","console","warn","trace","call","schemaName","prototype","Object","create","constructor","OptionsConstructor","get","auto","turnOn","default","defaultId","set","resetId","_checkRequired","v","_cast","cast","caster","arguments","Error","checkRequired","value","doc","_isRef","init","undefined","$__","wasPopulated","name","toLowerCase","toHexString","Buffer","isBuffer","isObject","path","$__fullPath","owner","ownerDocument","pop","populated","ret","lean","error","handleSingle","val","$conditionalHandlers","$gt","$gte","$lt","$lte","$runBeforeSetters","_v","_id","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaObjectIdOptions = require('../options/SchemaObjectIdOptions');\nconst SchemaType = require('../schematype');\nconst castObjectId = require('../cast/objectid');\nconst oid = require('../types/objectid');\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * ObjectId SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction ObjectId(key, options) {\n  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);\n  const suppressWarning = options && options.suppressWarning;\n  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {\n    console.warn('mongoose: To create a new ObjectId please try ' +\n      '`Mongoose.Types.ObjectId` instead of using ' +\n      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +\n      'you\\'re trying to create a hex char path in your schema.');\n    console.trace();\n  }\n  SchemaType.call(this, key, options, 'ObjectID');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nObjectId.schemaName = 'ObjectId';\n\n/*!\n * Inherits from SchemaType.\n */\nObjectId.prototype = Object.create(SchemaType.prototype);\nObjectId.prototype.constructor = ObjectId;\nObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;\n\n/**\n * Attaches a getter for all ObjectId instances\n *\n * ####Example:\n *\n *     // Always convert to string when getting an ObjectId\n *     mongoose.ObjectId.get(v => v.toString());\n *\n *     const Model = mongoose.model('Test', new Schema({}));\n *     typeof (new Model({})._id); // 'string'\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.get = SchemaType.get;\n\n/**\n * Adds an auto-generated ObjectId default if turnOn is true.\n * @param {Boolean} turnOn auto generated ObjectId defaults\n * @api public\n * @return {SchemaType} this\n */\n\nObjectId.prototype.auto = function(turnOn) {\n  if (turnOn) {\n    this.default(defaultId);\n    this.set(resetId);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nObjectId._checkRequired = v => v instanceof oid;\n\n/*!\n * ignore\n */\n\nObjectId._cast = castObjectId;\n\n/**\n * Get/set the function used to cast arbitrary values to objectids.\n *\n * ####Example:\n *\n *     // Make Mongoose only try to cast length 24 strings. By default, any 12\n *     // char string is a valid ObjectId.\n *     const original = mongoose.ObjectId.cast();\n *     mongoose.ObjectId.cast(v => {\n *       assert.ok(typeof v !== 'string' || v.length === 24);\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.ObjectId.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nObjectId.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = v => {\n      if (!(v instanceof oid)) {\n        throw new Error();\n      }\n      return v;\n    };\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ str: { type: String, required: true } });\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nObjectId.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    ObjectId.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to ObjectId\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nObjectId.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (value instanceof oid) {\n      return value;\n    } else if ((value.constructor.name || '').toLowerCase() === 'objectid') {\n      return new oid(value.toHexString());\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('ObjectId', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    let ret = value;\n    if (!doc.$__.populated ||\n        !doc.$__.populated[path] ||\n        !doc.$__.populated[path].options ||\n        !doc.$__.populated[path].options.options ||\n        !doc.$__.populated[path].options.options.lean) {\n      ret = new pop.options[populateModelSymbol](value);\n      ret.$__.wasPopulated = true;\n    }\n\n    return ret;\n  }\n\n  const castObjectId = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    ObjectId.cast();\n  try {\n    return castObjectId(value);\n  } catch (error) {\n    throw new CastError('ObjectId', value, this.path);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nObjectId.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/*!\n * ignore\n */\n\nfunction defaultId() {\n  return new oid();\n}\n\ndefaultId.$runBeforeSetters = true;\n\nfunction resetId(v) {\n  Document || (Document = require('./../document'));\n\n  if (this instanceof Document) {\n    if (v === void 0) {\n      const _v = new oid;\n      this.$__._id = _v;\n      return _v;\n    }\n\n    this.$__._id = v;\n  }\n\n  return v;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = ObjectId;\n"]},"metadata":{},"sourceType":"script"}