{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst CoreMongooseArray = require('./core_array');\n\nconst Document = require('../document');\n\nconst ObjectId = require('./objectid');\n\nconst castObjectId = require('../cast/objectid');\n\nconst getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');\n\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\n\nconst util = require('util');\n\nconst utils = require('../utils');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\n\nconst _basePush = Array.prototype.push;\n\nclass CoreDocumentArray extends CoreMongooseArray {\n  get isMongooseDocumentArray() {\n    return true;\n  }\n  /*!\n   * ignore\n   */\n\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n\n  _cast(value, index) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ? value && value.isMongooseDocumentArray : value instanceof Constructor;\n\n    if (isInstance || // Hack re: #5001, see #5005\n    value && value.constructor && value.constructor.baseCasterConstructor === Constructor) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    } // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n\n\n    if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {\n      value = {\n        _id: value\n      };\n    }\n\n    if (value && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, value[Constructor.schema.options.discriminatorKey]);\n\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n\n    return new Constructor(value, this, undefined, undefined, index);\n  }\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     var embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  id(id) {\n    let casted;\n    let sid;\n\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (let i = 0, l = this.length; i < l; i++) {\n      if (!this[i]) {\n        continue;\n      }\n\n      _id = this[i].get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n\n        if (sid == _id._id) {\n          return this[i];\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (utils.deepEqual(id, _id)) {\n          return this[i];\n        }\n      } else if (casted == _id) {\n        return this[i];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function (doc) {\n      if (doc == null) {\n        return null;\n      }\n\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n\n      return doc.toObject(options);\n    }));\n  }\n\n  slice() {\n    const arr = super.slice.apply(this, arguments);\n    arr[arrayParentSymbol] = this[arrayParentSymbol];\n    arr[arrayPathSymbol] = this[arrayPathSymbol];\n    return arr;\n  }\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n\n  push() {\n    const ret = super.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n\n  pull() {\n    const ret = super.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n\n  shift() {\n    const ret = super.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n\n  splice() {\n    const ret = super.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  inspect() {\n    return this.toObject();\n  }\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n\n    if (obj && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, obj[Constructor.schema.options.discriminatorKey]);\n\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  }\n  /*!\n   * ignore\n   */\n\n\n  notify(event) {\n    const _this = this;\n\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  }\n\n}\n\nif (util.inspect.custom) {\n  CoreDocumentArray.prototype[util.inspect.custom] = CoreDocumentArray.prototype.inspect;\n}\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n  const populatedPaths = Object.keys(parent.$__.populated).filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.populated(remnant));\n  }\n}\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\n\nfunction MongooseDocumentArray(values, path, doc) {\n  // TODO: replace this with `new CoreDocumentArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreDocumentArray();\n  arr[arrayAtomicsSymbol] = {};\n  arr[arraySchemaSymbol] = void 0;\n\n  if (Array.isArray(values)) {\n    if (values instanceof CoreDocumentArray && values[arrayPathSymbol] === path && values[arrayParentSymbol] === doc) {\n      arr[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n\n    values.forEach(v => {\n      _basePush.call(arr, v);\n    });\n  }\n\n  arr[arrayPathSymbol] = path; // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path); // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n\n    while (arr != null && arr[arraySchemaSymbol] != null && arr[arraySchemaSymbol].$isMongooseArray && !arr[arraySchemaSymbol].$isMongooseDocumentArray) {\n      arr[arraySchemaSymbol] = arr[arraySchemaSymbol].casterConstructor;\n    }\n  }\n\n  return arr;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = MongooseDocumentArray;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/types/documentarray.js"],"names":["CoreMongooseArray","require","Document","ObjectId","castObjectId","getDiscriminatorByValue","internalToObjectOptions","util","utils","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","documentArrayParent","_basePush","Array","prototype","push","CoreDocumentArray","isMongooseDocumentArray","toBSON","toObject","_cast","value","index","Constructor","casterConstructor","isInstance","$isMongooseDocumentArray","constructor","baseCasterConstructor","__parentArray","$setIndex","undefined","Buffer","isBuffer","isObject","_id","discriminators","schema","options","discriminatorKey","constructorByValue","cast","id","casted","sid","toString","e","i","l","length","get","String","deepEqual","concat","map","doc","slice","arr","apply","arguments","ret","_updateParentPopulated","pull","shift","splice","inspect","create","obj","notify","event","_this","val","_arr","isMongooseArray","emit","custom","parent","$__","populated","populatedPaths","Object","keys","filter","p","startsWith","path","remnant","isArray","MongooseDocumentArray","values","assign","forEach","v","call","$isMongooseArray","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CoreMongooseArray = require('./core_array');\nconst Document = require('../document');\nconst ObjectId = require('./objectid');\nconst castObjectId = require('../cast/objectid');\nconst getDiscriminatorByValue = require('../helpers/discriminator/getDiscriminatorByValue');\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\nconst util = require('util');\nconst utils = require('../utils');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\n\nconst _basePush = Array.prototype.push;\n\nclass CoreDocumentArray extends CoreMongooseArray {\n  get isMongooseDocumentArray() {\n    return true;\n  }\n\n  /*!\n   * ignore\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  }\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast(value, index) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ?\n      value && value.isMongooseDocumentArray :\n      value instanceof Constructor;\n    if (isInstance ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        value instanceof ObjectId || !utils.isObject(value)) {\n      value = {_id: value};\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    return new Constructor(value, this, undefined, undefined, index);\n  }\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     var embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n\n    for (let i = 0, l = this.length; i < l; i++) {\n      if (!this[i]) {\n        continue;\n      }\n      _id = this[i].get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return this[i];\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (utils.deepEqual(id, _id)) {\n          return this[i];\n        }\n      } else if (casted == _id) {\n        return this[i];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function(doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  }\n\n  slice() {\n    const arr = super.slice.apply(this, arguments);\n    arr[arrayParentSymbol] = this[arrayParentSymbol];\n    arr[arrayPathSymbol] = this[arrayPathSymbol];\n\n    return arr;\n  }\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @memberOf MongooseDocumentArray\n   */\n\n  push() {\n    const ret = super.push.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method pull\n   * @memberOf MongooseDocumentArray\n   */\n\n  pull() {\n    const ret = super.pull.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   */\n\n  shift() {\n    const ret = super.shift.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   */\n\n  splice() {\n    const ret = super.splice.apply(this, arguments);\n\n    _updateParentPopulated(this);\n\n    return ret;\n  }\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  inspect() {\n    return this.toObject();\n  }\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema &&\n        Constructor.schema.options &&\n        Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n\n    return new Constructor(obj, this);\n  }\n\n  /*!\n   * ignore\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n\n        if (_arr[i].isMongooseArray) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  }\n}\n\nif (util.inspect.custom) {\n  CoreDocumentArray.prototype[util.inspect.custom] =\n    CoreDocumentArray.prototype.inspect;\n}\n\n/*!\n * If this is a document array, each element may contain single\n * populated paths, so we need to modify the top-level document's\n * populated cache. See gh-8247, gh-8265.\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n\n  const populatedPaths = Object.keys(parent.$__.populated).\n    filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n\n    parent.$__.populated[path].value = arr.map(val => val.populated(remnant));\n  }\n}\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  // TODO: replace this with `new CoreDocumentArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreDocumentArray();\n\n  arr[arrayAtomicsSymbol] = {};\n  arr[arraySchemaSymbol] = void 0;\n  if (Array.isArray(values)) {\n    if (values instanceof CoreDocumentArray &&\n        values[arrayPathSymbol] === path &&\n        values[arrayParentSymbol] === doc) {\n      arr[arrayAtomicsSymbol] = Object.assign({}, values[arrayAtomicsSymbol]);\n    }\n    values.forEach(v => {\n      _basePush.call(arr, v);\n    });\n  }\n  arr[arrayPathSymbol] = path;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path);\n\n    // `schema.path()` doesn't drill into nested arrays properly yet, see\n    // gh-6398, gh-6602. This is a workaround because nested arrays are\n    // always plain non-document arrays, so once you get to a document array\n    // nesting is done. Matryoshka code.\n    while (arr != null &&\n        arr[arraySchemaSymbol] != null &&\n        arr[arraySchemaSymbol].$isMongooseArray &&\n        !arr[arraySchemaSymbol].$isMongooseDocumentArray) {\n      arr[arraySchemaSymbol] = arr[arraySchemaSymbol].casterConstructor;\n    }\n  }\n\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n"]},"metadata":{},"sourceType":"script"}