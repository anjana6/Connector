{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst SchemaType = require('../schematype');\n\nconst CastError = SchemaType.CastError;\n\nconst Decimal128Type = require('../types/decimal128');\n\nconst castDecimal128 = require('../cast/decimal128');\n\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nlet Document;\n/**\n * Decimal128 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Decimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nDecimal128.schemaName = 'Decimal128';\n/*!\n * Inherits from SchemaType.\n */\n\nDecimal128.prototype = Object.create(SchemaType.prototype);\nDecimal128.prototype.constructor = Decimal128;\n/*!\n * ignore\n */\n\nDecimal128._cast = castDecimal128;\n/**\n * Get/set the function used to cast arbitrary values to decimals.\n *\n * ####Example:\n *\n *     // Make Mongoose only refuse to cast numbers as decimal128\n *     const original = mongoose.Schema.Types.Decimal128.cast();\n *     mongoose.Decimal128.cast(v => {\n *       assert.ok(typeof v !== 'number');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Decimal128.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nDecimal128.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = v => {\n      if (v != null && !(v instanceof Decimal128Type)) {\n        throw new Error();\n      }\n\n      return v;\n    };\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/*!\n * ignore\n */\n\n\nDecimal128._checkRequired = v => v instanceof Decimal128Type;\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nDecimal128.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ? this.constructor.checkRequired() : Decimal128.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Casts to Decimal128\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\n\nDecimal128.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (value instanceof Decimal128Type) {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('Decimal128', value, this.path);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    let ret = value;\n\n    if (!doc.$__.populated || !doc.$__.populated[path] || !doc.$__.populated[path].options || !doc.$__.populated[path].options.options || !doc.$__.populated[path].options.options.lean) {\n      ret = new pop.options[populateModelSymbol](value);\n      ret.$__.wasPopulated = true;\n    }\n\n    return ret;\n  }\n\n  const castDecimal128 = typeof this.constructor.cast === 'function' ? this.constructor.cast() : Decimal128.cast();\n\n  try {\n    return castDecimal128(value);\n  } catch (error) {\n    throw new CastError('Decimal128', value, this.path);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nDecimal128.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n/*!\n * Module exports.\n */\n\nmodule.exports = Decimal128;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/schema/decimal128.js"],"names":["SchemaType","require","CastError","Decimal128Type","castDecimal128","utils","populateModelSymbol","Document","Decimal128","key","options","call","schemaName","prototype","Object","create","constructor","_cast","cast","caster","arguments","length","v","Error","_checkRequired","checkRequired","value","doc","_isRef","init","undefined","$__","wasPopulated","Buffer","isBuffer","isObject","path","$__fullPath","owner","ownerDocument","pop","populated","ret","lean","error","handleSingle","val","$conditionalHandlers","$gt","$gte","$lt","$lte","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaType = require('../schematype');\nconst CastError = SchemaType.CastError;\nconst Decimal128Type = require('../types/decimal128');\nconst castDecimal128 = require('../cast/decimal128');\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nlet Document;\n\n/**\n * Decimal128 SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Decimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nDecimal128.schemaName = 'Decimal128';\n\n/*!\n * Inherits from SchemaType.\n */\nDecimal128.prototype = Object.create(SchemaType.prototype);\nDecimal128.prototype.constructor = Decimal128;\n\n/*!\n * ignore\n */\n\nDecimal128._cast = castDecimal128;\n\n/**\n * Get/set the function used to cast arbitrary values to decimals.\n *\n * ####Example:\n *\n *     // Make Mongoose only refuse to cast numbers as decimal128\n *     const original = mongoose.Schema.Types.Decimal128.cast();\n *     mongoose.Decimal128.cast(v => {\n *       assert.ok(typeof v !== 'number');\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Decimal128.cast(false);\n *\n * @param {Function} [caster]\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nDecimal128.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = v => {\n      if (v != null && !(v instanceof Decimal128Type)) {\n        throw new Error();\n      }\n      return v;\n    };\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nDecimal128._checkRequired = v => v instanceof Decimal128Type;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nDecimal128.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    Decimal128.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Casts to Decimal128\n *\n * @param {Object} value\n * @param {Object} doc\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nDecimal128.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (value instanceof Decimal128Type) {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('Decimal128', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    let ret = value;\n    if (!doc.$__.populated ||\n        !doc.$__.populated[path] ||\n        !doc.$__.populated[path].options ||\n        !doc.$__.populated[path].options.options ||\n        !doc.$__.populated[path].options.options.lean) {\n      ret = new pop.options[populateModelSymbol](value);\n      ret.$__.wasPopulated = true;\n    }\n\n    return ret;\n  }\n\n  const castDecimal128 = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    Decimal128.cast();\n  try {\n    return castDecimal128(value);\n  } catch (error) {\n    throw new CastError('Decimal128', value, this.path);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nDecimal128.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Decimal128;\n"]},"metadata":{},"sourceType":"script"}