{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst MongooseBuffer = require('../types/buffer');\n\nconst SchemaBufferOptions = require('../options/SchemaBufferOptions');\n\nconst SchemaType = require('../schematype');\n\nconst handleBitwiseOperator = require('./operators/bitwise');\n\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst Binary = MongooseBuffer.Binary;\nconst CastError = SchemaType.CastError;\nlet Document;\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaBuffer.schemaName = 'Buffer';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\nSchemaBuffer.prototype.OptionsConstructor = SchemaBufferOptions;\n/*!\n * ignore\n */\n\nSchemaBuffer._checkRequired = v => !!(v && v.length);\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ buf: { type: Buffer, required: true } });\n *     new M({ buf: Buffer.from('') }).validateSync(); // validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaBuffer.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function (value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  return this.constructor._checkRequired(value);\n};\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\n\nSchemaBuffer.prototype.cast = function (value, doc, init) {\n  let ret;\n\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (Buffer.isBuffer(value)) {\n      return value;\n    } else if (!utils.isObject(value)) {\n      throw new CastError('buffer', value, this.path);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  } // documents\n\n\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n\n      if (this.options.subtype != null) {\n        value._subtype = this.options.subtype;\n      }\n    }\n\n    return value;\n  }\n\n  if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('buffer', value, this.path);\n    }\n\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n  const type = typeof value;\n\n  if (type === 'string' || type === 'number' || Array.isArray(value) || type === 'object' && value.type === 'Buffer' && Array.isArray(value.data) // gh-6863\n  ) {\n      if (type === 'number') {\n        value = [value];\n      }\n\n      ret = new MongooseBuffer(value, [this.path, doc]);\n\n      if (this.options.subtype != null) {\n        ret._subtype = this.options.subtype;\n      }\n\n      return ret;\n    }\n\n  throw new CastError('buffer', value, this.path);\n};\n/**\n * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)\n * for this buffer. You can find a [list of allowed subtypes here](http://api.mongodb.com/python/current/api/bson/binary.html).\n *\n * ####Example:\n *\n *     var s = new Schema({ uuid: { type: Buffer, subtype: 4 });\n *     var M = db.model('M', s);\n *     var m = new M({ uuid: 'test string' });\n *     m.uuid._subtype; // 4\n *\n * @param {Number} subtype the default subtype\n * @return {SchemaType} this\n * @api public\n */\n\n\nSchemaBuffer.prototype.subtype = function (subtype) {\n  this.options.subtype = subtype;\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  const casted = this._castForQuery(val);\n\n  return casted ? casted.toObject({\n    transform: false,\n    virtuals: false\n  }) : casted;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaBuffer;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/schema/buffer.js"],"names":["MongooseBuffer","require","SchemaBufferOptions","SchemaType","handleBitwiseOperator","utils","populateModelSymbol","Binary","CastError","Document","SchemaBuffer","key","options","call","schemaName","prototype","Object","create","constructor","OptionsConstructor","_checkRequired","v","length","checkRequired","value","doc","_isRef","cast","init","ret","undefined","$__","wasPopulated","Buffer","isBuffer","isObject","path","$__fullPath","owner","ownerDocument","pop","populated","_id","isMongooseBuffer","subtype","_subtype","sub_type","type","Array","isArray","data","handleSingle","val","castForQuery","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$gt","$gte","$lt","$lte","$conditional","handler","arguments","Error","casted","_castForQuery","toObject","transform","virtuals","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseBuffer = require('../types/buffer');\nconst SchemaBufferOptions = require('../options/SchemaBufferOptions');\nconst SchemaType = require('../schematype');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst Binary = MongooseBuffer.Binary;\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBuffer.schemaName = 'Buffer';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\nSchemaBuffer.prototype.OptionsConstructor = SchemaBufferOptions;\n\n/*!\n * ignore\n */\n\nSchemaBuffer._checkRequired = v => !!(v && v.length);\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * ####Example:\n *\n *     // Allow empty strings to pass `required` check\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\n *\n *     const M = mongoose.model({ buf: { type: Buffer, required: true } });\n *     new M({ buf: Buffer.from('') }).validateSync(); // validation passes!\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBuffer.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaBuffer.prototype.cast = function(value, doc, init) {\n  let ret;\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (Buffer.isBuffer(value)) {\n      return value;\n    } else if (!utils.isObject(value)) {\n      throw new CastError('buffer', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // documents\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n      if (this.options.subtype != null) {\n        value._subtype = this.options.subtype;\n      }\n    }\n    return value;\n  }\n\n  if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('buffer', value, this.path);\n    }\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n\n  const type = typeof value;\n  if (\n    type === 'string' || type === 'number' || Array.isArray(value) ||\n    (type === 'object' && value.type === 'Buffer' && Array.isArray(value.data)) // gh-6863\n  ) {\n    if (type === 'number') {\n      value = [value];\n    }\n    ret = new MongooseBuffer(value, [this.path, doc]);\n    if (this.options.subtype != null) {\n      ret._subtype = this.options.subtype;\n    }\n    return ret;\n  }\n\n  throw new CastError('buffer', value, this.path);\n};\n\n/**\n * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)\n * for this buffer. You can find a [list of allowed subtypes here](http://api.mongodb.com/python/current/api/bson/binary.html).\n *\n * ####Example:\n *\n *     var s = new Schema({ uuid: { type: Buffer, subtype: 4 });\n *     var M = db.model('M', s);\n *     var m = new M({ uuid: 'test string' });\n *     m.uuid._subtype; // 4\n *\n * @param {Number} subtype the default subtype\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaBuffer.prototype.subtype = function(subtype) {\n  this.options.subtype = subtype;\n  return this;\n};\n\n/*!\n * ignore\n */\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  const casted = this._castForQuery(val);\n  return casted ? casted.toObject({ transform: false, virtuals: false }) : casted;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBuffer;\n"]},"metadata":{},"sourceType":"script"}