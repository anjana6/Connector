{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst Decimal128 = require('../types/decimal128');\n\nconst ObjectId = require('../types/objectid');\n\nconst utils = require('../utils');\n\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options, schema) {\n  let keys;\n\n  if (update && utils.isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({\n      transform: false,\n      virtuals: false\n    }));\n  } else {\n    keys = Object.keys(update || {});\n  }\n\n  const numKeys = keys.length;\n  const result = {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const val = update[key];\n    result[path + key] = val; // Avoid going into mixed paths if schema is specified\n\n    const keySchema = schema && schema.path && schema.path(path + key);\n    if (keySchema && keySchema.instance === 'Mixed') continue;\n\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n\n      const flat = flatten(val, path + key, options, schema);\n\n      for (const k in flat) {\n        result[k] = flat[k];\n      }\n\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n  }\n\n  return result;\n}\n/*!\n * ignore\n */\n\n\nfunction modifiedPaths(update, path, result) {\n  const keys = Object.keys(update || {});\n  const numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    let val = update[key];\n    result[path + key] = true;\n\n    if (utils.isMongooseObject(val) && !Buffer.isBuffer(val)) {\n      val = val.toObject({\n        transform: false,\n        virtuals: false\n      });\n    }\n\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result);\n    }\n  }\n\n  return result;\n}\n/*!\n * ignore\n */\n\n\nfunction shouldFlatten(val) {\n  return val && typeof val === 'object' && !(val instanceof Date) && !(val instanceof ObjectId) && (!Array.isArray(val) || val.length > 0) && !(val instanceof Buffer) && !(val instanceof Decimal128);\n}","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/helpers/common.js"],"names":["Decimal128","require","ObjectId","utils","exports","flatten","modifiedPaths","update","path","options","schema","keys","isMongooseObject","Buffer","isBuffer","Object","toObject","transform","virtuals","numKeys","length","result","i","key","val","keySchema","instance","shouldFlatten","skipArrays","Array","isArray","flat","k","Date"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst Decimal128 = require('../types/decimal128');\nconst ObjectId = require('../types/objectid');\nconst utils = require('../utils');\n\nexports.flatten = flatten;\nexports.modifiedPaths = modifiedPaths;\n\n/*!\n * ignore\n */\n\nfunction flatten(update, path, options, schema) {\n  let keys;\n  if (update && utils.isMongooseObject(update) && !Buffer.isBuffer(update)) {\n    keys = Object.keys(update.toObject({ transform: false, virtuals: false }));\n  } else {\n    keys = Object.keys(update || {});\n  }\n\n  const numKeys = keys.length;\n  const result = {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    const val = update[key];\n    result[path + key] = val;\n\n    // Avoid going into mixed paths if schema is specified\n    const keySchema = schema && schema.path && schema.path(path + key);\n    if (keySchema && keySchema.instance === 'Mixed') continue;\n\n    if (shouldFlatten(val)) {\n      if (options && options.skipArrays && Array.isArray(val)) {\n        continue;\n      }\n      const flat = flatten(val, path + key, options, schema);\n      for (const k in flat) {\n        result[k] = flat[k];\n      }\n      if (Array.isArray(val)) {\n        result[path + key] = val;\n      }\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction modifiedPaths(update, path, result) {\n  const keys = Object.keys(update || {});\n  const numKeys = keys.length;\n  result = result || {};\n  path = path ? path + '.' : '';\n\n  for (let i = 0; i < numKeys; ++i) {\n    const key = keys[i];\n    let val = update[key];\n\n    result[path + key] = true;\n    if (utils.isMongooseObject(val) && !Buffer.isBuffer(val)) {\n      val = val.toObject({ transform: false, virtuals: false });\n    }\n    if (shouldFlatten(val)) {\n      modifiedPaths(val, path + key, result);\n    }\n  }\n\n  return result;\n}\n\n/*!\n * ignore\n */\n\nfunction shouldFlatten(val) {\n  return val &&\n    typeof val === 'object' &&\n    !(val instanceof Date) &&\n    !(val instanceof ObjectId) &&\n    (!Array.isArray(val) || val.length > 0) &&\n    !(val instanceof Buffer) &&\n    !(val instanceof Decimal128);\n}\n"]},"metadata":{},"sourceType":"script"}