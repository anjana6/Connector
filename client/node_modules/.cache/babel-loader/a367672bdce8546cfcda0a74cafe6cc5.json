{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst CoreMongooseArray = require('./core_array');\n\nconst Document = require('../document');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\n\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\n\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\n\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst _basePush = Array.prototype.push;\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc) {\n  // TODO: replace this with `new CoreMongooseArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreMongooseArray();\n  arr[arrayAtomicsSymbol] = {};\n\n  if (Array.isArray(values)) {\n    const len = values.length;\n\n    for (let i = 0; i < len; ++i) {\n      _basePush.call(arr, values[i]);\n    }\n\n    arr[arrayAtomicsSymbol] = values[arrayAtomicsSymbol] || {};\n  }\n\n  arr[arrayPathSymbol] = path;\n  arr[arraySchemaSymbol] = void 0; // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path);\n  }\n\n  return arr;\n}\n/*!\n * Module exports.\n */\n\n\nmodule.exports = exports = MongooseArray;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/types/array.js"],"names":["CoreMongooseArray","require","Document","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","_basePush","Array","prototype","push","MongooseArray","values","path","doc","arr","isArray","len","length","i","call","schema","module","exports"],"mappings":"AAAA;;;AAIA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,cAAD,CAAjC;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AAEA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,oBAAD,CAAP,CAA8BE,kBAAzD;;AACA,MAAMC,iBAAiB,GAAGH,OAAO,CAAC,oBAAD,CAAP,CAA8BG,iBAAxD;;AACA,MAAMC,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAAP,CAA8BI,eAAtD;;AACA,MAAMC,iBAAiB,GAAGL,OAAO,CAAC,oBAAD,CAAP,CAA8BK,iBAAxD;;AAEA,MAAMC,SAAS,GAAGC,KAAK,CAACC,SAAN,CAAgBC,IAAlC;AAEA;;;;;;;;;;;;;;;AAeA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0C;AACxC;AACA;AACA,QAAMC,GAAG,GAAG,IAAIf,iBAAJ,EAAZ;AACAe,EAAAA,GAAG,CAACZ,kBAAD,CAAH,GAA0B,EAA1B;;AAEA,MAAIK,KAAK,CAACQ,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,UAAMK,GAAG,GAAGL,MAAM,CAACM,MAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyB,EAAEE,CAA3B,EAA8B;AAC5BZ,MAAAA,SAAS,CAACa,IAAV,CAAeL,GAAf,EAAoBH,MAAM,CAACO,CAAD,CAA1B;AACD;;AAEDJ,IAAAA,GAAG,CAACZ,kBAAD,CAAH,GAA0BS,MAAM,CAACT,kBAAD,CAAN,IAA8B,EAAxD;AACD;;AAEDY,EAAAA,GAAG,CAACV,eAAD,CAAH,GAAuBQ,IAAvB;AACAE,EAAAA,GAAG,CAACT,iBAAD,CAAH,GAAyB,KAAK,CAA9B,CAhBwC,CAkBxC;AACA;AACA;AACA;;AACA,MAAIQ,GAAG,IAAIA,GAAG,YAAYZ,QAA1B,EAAoC;AAClCa,IAAAA,GAAG,CAACX,iBAAD,CAAH,GAAyBU,GAAzB;AACAC,IAAAA,GAAG,CAACT,iBAAD,CAAH,GAAyBQ,GAAG,CAACO,MAAJ,CAAWR,IAAX,CAAgBA,IAAhB,CAAzB;AACD;;AAED,SAAOE,GAAP;AACD;AAED;;;;;AAIAO,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGZ,aAA3B","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst CoreMongooseArray = require('./core_array');\nconst Document = require('../document');\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../helpers/symbols').arraySchemaSymbol;\n\nconst _basePush = Array.prototype.push;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc) {\n  // TODO: replace this with `new CoreMongooseArray().concat()` when we remove\n  // support for node 4.x and 5.x, see https://i.imgur.com/UAAHk4S.png\n  const arr = new CoreMongooseArray();\n  arr[arrayAtomicsSymbol] = {};\n\n  if (Array.isArray(values)) {\n    const len = values.length;\n    for (let i = 0; i < len; ++i) {\n      _basePush.call(arr, values[i]);\n    }\n\n    arr[arrayAtomicsSymbol] = values[arrayAtomicsSymbol] || {};\n  }\n\n  arr[arrayPathSymbol] = path;\n  arr[arraySchemaSymbol] = void 0;\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr[arrayParentSymbol] = doc;\n    arr[arraySchemaSymbol] = doc.schema.path(path);\n  }\n\n  return arr;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n"]},"metadata":{},"sourceType":"script"}