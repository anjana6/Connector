{"ast":null,"code":"'use strict';\n\nconst utils = require('../utils');\n/**\n * The options defined on a schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').options instanceof mongoose.SchemaTypeOptions; // true\n *\n * @api public\n * @constructor SchemaTypeOptions\n */\n\n\nclass SchemaTypeOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return this;\n    }\n\n    Object.assign(this, utils.clone(obj));\n  }\n\n}\n\nconst opts = require('./propertyOptions');\n/**\n * The type to cast this path to.\n *\n * @api public\n * @property type\n * @memberOf SchemaTypeOptions\n * @type Function|String|Object\n * @instance\n */\n\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'type', opts);\n/**\n * Function or object describing how to validate this schematype.\n *\n * @api public\n * @property validate\n * @memberOf SchemaTypeOptions\n * @type Function|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'validate', opts);\n/**\n * If true, attach a required validator to this path, which ensures this path\n * path cannot be set to a nullish value. If a function, Mongoose calls the\n * function and only checks for nullish values if the function returns a truthy value.\n *\n * @api public\n * @property required\n * @memberOf SchemaTypeOptions\n * @type Function|Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'required', opts);\n/**\n * The default value for this path. If a function, Mongoose executes the function\n * and uses the return value as the default.\n *\n * @api public\n * @property default\n * @memberOf SchemaTypeOptions\n * @type Function|Any\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'default', opts);\n/**\n * The model that `populate()` should use if populating this path.\n *\n * @api public\n * @property ref\n * @memberOf SchemaTypeOptions\n * @type Function|String\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'ref', opts);\n/**\n * Whether to include or exclude this path by default when loading documents\n * using `find()`, `findOne()`, etc.\n *\n * @api public\n * @property select\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'select', opts);\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build an index on this path when the model is\n * compiled.\n *\n * @api public\n * @property index\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'index', opts);\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a unique index on this path when the\n * model is compiled. [The `unique` option is **not** a validator](/docs/validation.html#the-unique-option-is-not-a-validator).\n *\n * @api public\n * @property unique\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'unique', opts);\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * disallow changes to this path once the document\n * is saved to the database for the first time. Read more about [immutability in Mongoose here](http://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html).\n *\n * @api public\n * @property immutable\n * @memberOf SchemaTypeOptions\n * @type Function|Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'immutable', opts);\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build a sparse index on this path.\n *\n * @api public\n * @property sparse\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'sparse', opts);\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a text index on this path.\n *\n * @api public\n * @property text\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'text', opts);\nmodule.exports = SchemaTypeOptions;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/options/SchemaTypeOptions.js"],"names":["utils","require","SchemaTypeOptions","constructor","obj","Object","assign","clone","opts","defineProperty","prototype","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;AAEA;;;;;;;;;;;;;AAYA,MAAMC,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,IAAP;AACD;;AACDC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBN,KAAK,CAACO,KAAN,CAAYH,GAAZ,CAApB;AACD;;AANqB;;AASxB,MAAMI,IAAI,GAAGP,OAAO,CAAC,mBAAD,CAApB;AAEA;;;;;;;;;;;AAUAI,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,MAAnD,EAA2DF,IAA3D;AAEA;;;;;;;;;;AAUAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,UAAnD,EAA+DF,IAA/D;AAEA;;;;;;;;;;;;AAYAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,UAAnD,EAA+DF,IAA/D;AAEA;;;;;;;;;;;AAWAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,SAAnD,EAA8DF,IAA9D;AAEA;;;;;;;;;;AAUAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,KAAnD,EAA0DF,IAA1D;AAEA;;;;;;;;;;;AAWAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,QAAnD,EAA6DF,IAA7D;AAEA;;;;;;;;;;;;AAYAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,OAAnD,EAA4DF,IAA5D;AAEA;;;;;;;;;;;;AAYAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,QAAnD,EAA6DF,IAA7D;AAEA;;;;;;;;;;;;AAYAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,WAAnD,EAAgEF,IAAhE;AAEA;;;;;;;;;;;AAWAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,QAAnD,EAA6DF,IAA7D;AAEA;;;;;;;;;;;AAWAH,MAAM,CAACI,cAAP,CAAsBP,iBAAiB,CAACQ,SAAxC,EAAmD,MAAnD,EAA2DF,IAA3D;AAEAG,MAAM,CAACC,OAAP,GAAiBV,iBAAjB","sourcesContent":["'use strict';\n\nconst utils = require('../utils');\n\n/**\n * The options defined on a schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ name: String });\n *     schema.path('name').options instanceof mongoose.SchemaTypeOptions; // true\n *\n * @api public\n * @constructor SchemaTypeOptions\n */\n\nclass SchemaTypeOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return this;\n    }\n    Object.assign(this, utils.clone(obj));\n  }\n}\n\nconst opts = require('./propertyOptions');\n\n/**\n * The type to cast this path to.\n *\n * @api public\n * @property type\n * @memberOf SchemaTypeOptions\n * @type Function|String|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'type', opts);\n\n/**\n * Function or object describing how to validate this schematype.\n *\n * @api public\n * @property validate\n * @memberOf SchemaTypeOptions\n * @type Function|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'validate', opts);\n\n/**\n * If true, attach a required validator to this path, which ensures this path\n * path cannot be set to a nullish value. If a function, Mongoose calls the\n * function and only checks for nullish values if the function returns a truthy value.\n *\n * @api public\n * @property required\n * @memberOf SchemaTypeOptions\n * @type Function|Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'required', opts);\n\n/**\n * The default value for this path. If a function, Mongoose executes the function\n * and uses the return value as the default.\n *\n * @api public\n * @property default\n * @memberOf SchemaTypeOptions\n * @type Function|Any\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'default', opts);\n\n/**\n * The model that `populate()` should use if populating this path.\n *\n * @api public\n * @property ref\n * @memberOf SchemaTypeOptions\n * @type Function|String\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'ref', opts);\n\n/**\n * Whether to include or exclude this path by default when loading documents\n * using `find()`, `findOne()`, etc.\n *\n * @api public\n * @property select\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'select', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build an index on this path when the model is\n * compiled.\n *\n * @api public\n * @property index\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'index', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a unique index on this path when the\n * model is compiled. [The `unique` option is **not** a validator](/docs/validation.html#the-unique-option-is-not-a-validator).\n *\n * @api public\n * @property unique\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'unique', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * disallow changes to this path once the document\n * is saved to the database for the first time. Read more about [immutability in Mongoose here](http://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html).\n *\n * @api public\n * @property immutable\n * @memberOf SchemaTypeOptions\n * @type Function|Boolean\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'immutable', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\n * build a sparse index on this path.\n *\n * @api public\n * @property sparse\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'sparse', opts);\n\n/**\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\n * will build a text index on this path.\n *\n * @api public\n * @property text\n * @memberOf SchemaTypeOptions\n * @type Boolean|Number|Object\n * @instance\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'text', opts);\n\nmodule.exports = SchemaTypeOptions;"]},"metadata":{},"sourceType":"script"}