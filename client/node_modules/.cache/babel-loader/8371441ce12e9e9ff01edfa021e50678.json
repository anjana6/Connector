{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./');\n\nconst util = require('util');\n/*!\n * OverwriteModel Error constructor.\n *\n * @inherits MongooseError\n */\n\n\nfunction DocumentNotFoundError(filter, model, numAffected, result) {\n  let msg;\n  const messages = MongooseError.messages;\n\n  if (messages.DocumentNotFoundError != null) {\n    msg = typeof messages.DocumentNotFoundError === 'function' ? messages.DocumentNotFoundError(filter, model) : messages.DocumentNotFoundError;\n  } else {\n    msg = 'No document found for query \"' + util.inspect(filter) + '\" on model \"' + model + '\"';\n  }\n\n  MongooseError.call(this, msg);\n  this.name = 'DocumentNotFoundError';\n  this.result = result;\n  this.numAffected = numAffected;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n\n  this.filter = filter; // Backwards compat\n\n  this.query = filter;\n}\n/*!\n * Inherits from MongooseError.\n */\n\n\nDocumentNotFoundError.prototype = Object.create(MongooseError.prototype);\nDocumentNotFoundError.prototype.constructor = MongooseError;\n/*!\n * exports\n */\n\nmodule.exports = DocumentNotFoundError;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/error/notFound.js"],"names":["MongooseError","require","util","DocumentNotFoundError","filter","model","numAffected","result","msg","messages","inspect","call","name","Error","captureStackTrace","stack","query","prototype","Object","create","constructor","module","exports"],"mappings":"AAAA;AAEA;;;;AAIA,MAAMA,aAAa,GAAGC,OAAO,CAAC,IAAD,CAA7B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;AAEA;;;;;;;AAMA,SAASE,qBAAT,CAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CC,WAA9C,EAA2DC,MAA3D,EAAmE;AACjE,MAAIC,GAAJ;AACA,QAAMC,QAAQ,GAAGT,aAAa,CAACS,QAA/B;;AACA,MAAIA,QAAQ,CAACN,qBAAT,IAAkC,IAAtC,EAA4C;AAC1CK,IAAAA,GAAG,GAAG,OAAOC,QAAQ,CAACN,qBAAhB,KAA0C,UAA1C,GACJM,QAAQ,CAACN,qBAAT,CAA+BC,MAA/B,EAAuCC,KAAvC,CADI,GAEJI,QAAQ,CAACN,qBAFX;AAGD,GAJD,MAIO;AACLK,IAAAA,GAAG,GAAG,kCAAkCN,IAAI,CAACQ,OAAL,CAAaN,MAAb,CAAlC,GACJ,cADI,GACaC,KADb,GACqB,GAD3B;AAED;;AAEDL,EAAAA,aAAa,CAACW,IAAd,CAAmB,IAAnB,EAAyBH,GAAzB;AAEA,OAAKI,IAAL,GAAY,uBAAZ;AACA,OAAKL,MAAL,GAAcA,MAAd;AACA,OAAKD,WAAL,GAAmBA,WAAnB;;AACA,MAAIO,KAAK,CAACC,iBAAV,EAA6B;AAC3BD,IAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB;AACD,GAFD,MAEO;AACL,SAAKC,KAAL,GAAa,IAAIF,KAAJ,GAAYE,KAAzB;AACD;;AAED,OAAKX,MAAL,GAAcA,MAAd,CAvBiE,CAwBjE;;AACA,OAAKY,KAAL,GAAaZ,MAAb;AACD;AAED;;;;;AAIAD,qBAAqB,CAACc,SAAtB,GAAkCC,MAAM,CAACC,MAAP,CAAcnB,aAAa,CAACiB,SAA5B,CAAlC;AACAd,qBAAqB,CAACc,SAAtB,CAAgCG,WAAhC,GAA8CpB,aAA9C;AAEA;;;;AAIAqB,MAAM,CAACC,OAAP,GAAiBnB,qBAAjB","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst MongooseError = require('./');\nconst util = require('util');\n\n/*!\n * OverwriteModel Error constructor.\n *\n * @inherits MongooseError\n */\n\nfunction DocumentNotFoundError(filter, model, numAffected, result) {\n  let msg;\n  const messages = MongooseError.messages;\n  if (messages.DocumentNotFoundError != null) {\n    msg = typeof messages.DocumentNotFoundError === 'function' ?\n      messages.DocumentNotFoundError(filter, model) :\n      messages.DocumentNotFoundError;\n  } else {\n    msg = 'No document found for query \"' + util.inspect(filter) +\n      '\" on model \"' + model + '\"';\n  }\n\n  MongooseError.call(this, msg);\n\n  this.name = 'DocumentNotFoundError';\n  this.result = result;\n  this.numAffected = numAffected;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n\n  this.filter = filter;\n  // Backwards compat\n  this.query = filter;\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nDocumentNotFoundError.prototype = Object.create(MongooseError.prototype);\nDocumentNotFoundError.prototype.constructor = MongooseError;\n\n/*!\n * exports\n */\n\nmodule.exports = DocumentNotFoundError;\n"]},"metadata":{},"sourceType":"script"}