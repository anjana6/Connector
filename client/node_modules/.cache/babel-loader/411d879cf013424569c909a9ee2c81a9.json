{"ast":null,"code":"'use strict';\n/*!\n * ignore\n */\n\nconst MongooseMap = require('../types/map');\n\nconst SchemaMapOptions = require('../options/SchemaMapOptions');\n\nconst SchemaType = require('../schematype');\n/*!\n * ignore\n */\n\n\nclass Map extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    if (init) {\n      const map = new MongooseMap({}, this.path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          map.$init(key, map.$__schemaType.cast(val.get(key), doc, true));\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          map.$init(key, map.$__schemaType.cast(val[key], doc, true));\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, this.path, doc, this.$__schemaType);\n  }\n\n}\n\nMap.prototype.OptionsConstructor = SchemaMapOptions;\nmodule.exports = Map;","map":{"version":3,"sources":["D:/Other/Git/Developer-Connector/node_modules/mongoose/lib/schema/map.js"],"names":["MongooseMap","require","SchemaMapOptions","SchemaType","Map","constructor","key","options","$isSchemaMap","cast","val","doc","init","map","path","$__schemaType","global","keys","$init","get","Object","prototype","OptionsConstructor","module","exports"],"mappings":"AAAA;AAEA;;;;AAIA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAAD,CAAhC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,eAAD,CAA1B;AAEA;;;;;AAIA,MAAMG,GAAN,SAAkBD,UAAlB,CAA6B;AAC3BE,EAAAA,WAAW,CAACC,GAAD,EAAMC,OAAN,EAAe;AACxB,UAAMD,GAAN,EAAWC,OAAX,EAAoB,KAApB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;AAEDC,EAAAA,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiB;AACnB,QAAIF,GAAG,YAAYV,WAAnB,EAAgC;AAC9B,aAAOU,GAAP;AACD;;AAED,QAAIE,IAAJ,EAAU;AACR,YAAMC,GAAG,GAAG,IAAIb,WAAJ,CAAgB,EAAhB,EAAoB,KAAKc,IAAzB,EAA+BH,GAA/B,EAAoC,KAAKI,aAAzC,CAAZ;;AAEA,UAAIL,GAAG,YAAYM,MAAM,CAACZ,GAA1B,EAA+B;AAC7B,aAAK,MAAME,GAAX,IAAkBI,GAAG,CAACO,IAAJ,EAAlB,EAA8B;AAC5BJ,UAAAA,GAAG,CAACK,KAAJ,CAAUZ,GAAV,EAAeO,GAAG,CAACE,aAAJ,CAAkBN,IAAlB,CAAuBC,GAAG,CAACS,GAAJ,CAAQb,GAAR,CAAvB,EAAqCK,GAArC,EAA0C,IAA1C,CAAf;AACD;AACF,OAJD,MAIO;AACL,aAAK,MAAML,GAAX,IAAkBc,MAAM,CAACH,IAAP,CAAYP,GAAZ,CAAlB,EAAoC;AAClCG,UAAAA,GAAG,CAACK,KAAJ,CAAUZ,GAAV,EAAeO,GAAG,CAACE,aAAJ,CAAkBN,IAAlB,CAAuBC,GAAG,CAACJ,GAAD,CAA1B,EAAiCK,GAAjC,EAAsC,IAAtC,CAAf;AACD;AACF;;AAED,aAAOE,GAAP;AACD;;AAED,WAAO,IAAIb,WAAJ,CAAgBU,GAAhB,EAAqB,KAAKI,IAA1B,EAAgCH,GAAhC,EAAqC,KAAKI,aAA1C,CAAP;AACD;;AA5B0B;;AA+B7BX,GAAG,CAACiB,SAAJ,CAAcC,kBAAd,GAAmCpB,gBAAnC;AAEAqB,MAAM,CAACC,OAAP,GAAiBpB,GAAjB","sourcesContent":["'use strict';\n\n/*!\n * ignore\n */\n\nconst MongooseMap = require('../types/map');\nconst SchemaMapOptions = require('../options/SchemaMapOptions');\nconst SchemaType = require('../schematype');\n\n/*!\n * ignore\n */\n\nclass Map extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    if (init) {\n      const map = new MongooseMap({}, this.path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          map.$init(key, map.$__schemaType.cast(val.get(key), doc, true));\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          map.$init(key, map.$__schemaType.cast(val[key], doc, true));\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, this.path, doc, this.$__schemaType);\n  }\n}\n\nMap.prototype.OptionsConstructor = SchemaMapOptions;\n\nmodule.exports = Map;\n"]},"metadata":{},"sourceType":"script"}